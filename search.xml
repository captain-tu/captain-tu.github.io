<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mahout 推荐算法实战</title>
      <link href="/2022/07/03/recommend/02-mahout-tui-jian-suan-fa-shi-zhan/"/>
      <url>/2022/07/03/recommend/02-mahout-tui-jian-suan-fa-shi-zhan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Apache Mahout 是 Apache Software Foundation（ASF）旗下的一个开源项目，提供一些可扩展的机器学习领域经典算法的实现，旨在帮助开发人员更加方便快捷地创建智能应用程序。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Recommend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>推荐系统及推荐算法介绍</title>
      <link href="/2022/07/02/recommend/01-tui-jian-xi-tong-ji-tui-jian-suan-fa-jie-shao/"/>
      <url>/2022/07/02/recommend/01-tui-jian-xi-tong-ji-tui-jian-suan-fa-jie-shao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>互联网时代信息量已然处于爆炸状态，若是将所有内容都放在网站首页上用户是无从阅读的，信息的利用率将会十分低下。因此我们需要推荐系统来帮助用户过滤掉低价值的信息。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Recommend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>XXL-JOB 分布式JOB调度平台 接入集成</title>
      <link href="/2022/07/01/xxl-job/02-xxl-job-jie-ru-ji-cheng/"/>
      <url>/2022/07/01/xxl-job/02-xxl-job-jie-ru-ji-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>XXL-JOB</code>是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> XXL-JOB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>XXL-JOB 分布式JOB调度平台 介绍</title>
      <link href="/2022/06/30/xxl-job/01-xxl-job-jie-shao/"/>
      <url>/2022/06/30/xxl-job/01-xxl-job-jie-shao/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>XXL-JOB</code>是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> XXL-JOB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>新一代实时计算平台 Flink</title>
      <link href="/2022/06/25/flink/01-flink-jie-shao/"/>
      <url>/2022/06/25/flink/01-flink-jie-shao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Apache Flink is a framework and distributed processing engine for stateful computations over unbounded and bounded data streams. Flink has been designed to run in all common cluster environments, perform computations at in-memory speed and at any scale.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BPMN 最佳实践</title>
      <link href="/2022/06/22/camunda/03-camunda-bpmn-de-fu-wu-ji-cheng-mo-shi/"/>
      <url>/2022/06/22/camunda/03-camunda-bpmn-de-fu-wu-ji-cheng-mo-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Camunda最佳实践是我们在Camunda工具堆栈上使用BPMN和DMN的浓缩经验，并通过咨询与客户的互动，社区反馈和其他各种场合收集。最佳实践是概念和实际实施信息的混合体。最佳实践代表了我们实际项目经验的当前状态，只要它是可推广的。它们既不是“最终的”（从某种意义上说，我们自己也希望继续学习！），也不一定是你自己情况的最佳方法。</p></blockquote><h2 id="服务集成模式"><a href="#服务集成模式" class="headerlink" title="服务集成模式"></a>服务集成模式</h2><h3 id="服务与任务集成"><a href="#服务与任务集成" class="headerlink" title="服务与任务集成"></a>服务与任务集成</h3><h3 id="服务与事件集成"><a href="#服务与事件集成" class="headerlink" title="服务与事件集成"></a>服务与事件集成</h3>]]></content>
      
      
      <categories>
          
          <category> Camunda </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Camunda Modeler BPMN</title>
      <link href="/2022/06/21/camunda/02-camunda-liu-cheng-ji-chu-modeler-bpmn/"/>
      <url>/2022/06/21/camunda/02-camunda-liu-cheng-ji-chu-modeler-bpmn/</url>
      
        <content type="html"><![CDATA[<blockquote><p>A BPMN diagram is used to visually outline the structure and flow of a process. As a result, the process can be more easily understood by various stakeholders.</p></blockquote><h2 id="BPMN-elements"><a href="#BPMN-elements" class="headerlink" title="BPMN elements"></a>BPMN elements</h2><h3 id="Sequence-flow"><a href="#Sequence-flow" class="headerlink" title="Sequence flow"></a>Sequence flow</h3><p>A core concept of BPMN is a sequence flow that defines the order in which steps in the process happen. In BPMN’s visual representation, a sequence flow is an arrow connecting two elements. The direction of the arrow indicates their order of execution.</p><h3 id="Tasks-Units-of-work"><a href="#Tasks-Units-of-work" class="headerlink" title="Tasks: Units of work"></a>Tasks: Units of work</h3><p>The basic elements of BPMN processes are tasks; these are atomic units of work composed to create a meaningful result. Whenever a token reaches a task, the token stops and Zeebe creates a job and notifies a registered worker to perform work. When that handler signals completion, the token continues on the outgoing sequence flow.</p><h3 id="Gateways-Steering-flow"><a href="#Gateways-Steering-flow" class="headerlink" title="Gateways: Steering flow"></a>Gateways: Steering flow</h3><p>Gateways are elements that route tokens in more complex patterns than plain sequence flow.</p><ul><li>BPMN’s exclusive gateway chooses one sequence flow out of many based on data.</li><li>BPMN’s parallel gateway generates new tokens by activating multiple sequence flows in parallel.</li></ul><h3 id="Events-Waiting-for-sth-to-happen"><a href="#Events-Waiting-for-sth-to-happen" class="headerlink" title="Events: Waiting for sth to happen"></a>Events: Waiting for sth to happen</h3><p>Events in BPMN represent things that happen. A process can react to events (catching event) as well as emit events (throwing event)</p><h3 id="Subprocesses-Grouping-elements"><a href="#Subprocesses-Grouping-elements" class="headerlink" title="Subprocesses: Grouping elements"></a>Subprocesses: Grouping elements</h3><p>Subprocesses are element containers that allow defining common functionality. For example, we can attach an event to a sub process’s border, when the event is triggered, the subprocess is interrupted, regardless which of its elements is currently active.</p><h2 id="BPMN-coverage"><a href="#BPMN-coverage" class="headerlink" title="BPMN coverage"></a>BPMN coverage</h2><p><a href="https://docs.camunda.io/docs/components/modeler/bpmn/bpmn-coverage/">BPMN coverage</a></p><h2 id="Data-flow"><a href="#Data-flow" class="headerlink" title="Data flow"></a>Data flow</h2><p>Every BPMN process instance can have one or more variables.</p><p>Variables are key-value-pairs and hold the contextual data of the process instance required by job workers to do their work, or to decide which sequence flows to take. They can be provided when a process instance is created, when a job is completed, and when a message is correlated.</p><h3 id="Job-workers"><a href="#Job-workers" class="headerlink" title="Job workers"></a>Job workers</h3><h3 id="Variable-scopes-vs-token-based-data"><a href="#Variable-scopes-vs-token-based-data" class="headerlink" title="Variable scopes vs. token-based data"></a>Variable scopes vs. token-based data</h3><h3 id="Concurrency-considerations"><a href="#Concurrency-considerations" class="headerlink" title="Concurrency considerations"></a>Concurrency considerations</h3><h2 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h2><h3 id="Service-tasks"><a href="#Service-tasks" class="headerlink" title="Service tasks"></a>Service tasks</h3><p>A service task represents a work item in the process with a specific type. When a service task is entered, a corresponding job is created. The process instance stops here and waits until the job is complete.</p><h4 id="Task-definition"><a href="#Task-definition" class="headerlink" title="Task definition"></a>Task definition</h4><h4 id="Task-headers"><a href="#Task-headers" class="headerlink" title="Task headers"></a>Task headers</h4><h3 id="User-tasks"><a href="#User-tasks" class="headerlink" title="User tasks"></a>User tasks</h3><h4 id="User-task-forms"><a href="#User-task-forms" class="headerlink" title="User task forms"></a>User task forms</h4><h4 id="Assignments"><a href="#Assignments" class="headerlink" title="Assignments"></a>Assignments</h4><h3 id="Receive-tasks"><a href="#Receive-tasks" class="headerlink" title="Receive tasks"></a>Receive tasks</h3><p>Receive tasks reference a message; these are used to wait until a proper message is received.</p><h3 id="Business-rule-tasks"><a href="#Business-rule-tasks" class="headerlink" title="Business rule tasks"></a>Business rule tasks</h3><p>A business rule task is used to model the evaluation of a business rule; for example, a decision modeled in Decision Model and Notation (DMN).</p><p>When the process instance arrives at a business rule task, a decision is evaluated using the internal DMN decision engine. Once the decision is made, the process instance continues.</p><h3 id="Script-tasks"><a href="#Script-tasks" class="headerlink" title="Script tasks"></a>Script tasks</h3><p>A script task is used to model the evaluation of a script; for example, a script written in Groovy, JavaScript, or Python.</p><p>Script tasks behave exactly like service tasks. Both task types are based on jobs and job workers. The differences between these task types are the visual representation (i.e. the task marker) and the semantics for the model.</p><p>When a process instance enters a script task, it creates a corresponding job and waits for its completion. A job worker should request jobs of this job type and process them. When the job is complete, the process instance continues.</p><h3 id="Send-tasks"><a href="#Send-tasks" class="headerlink" title="Send tasks"></a>Send tasks</h3><p>A send task is used to model the publication of a message to an external system; for example, to a Kafka topic or a mail server.</p><p>Send tasks behave exactly like service tasks. Both task types are based on jobs and job workers. The differences between these task types are the visual representation (i.e. the task marker) and the semantics for the model.</p><p>When a process instance enters a send task, it creates a corresponding job and waits for its completion. A job worker should request jobs of this job type and process them. When the job is complete, the process instance continues. </p><h3 id="Manual-tasks"><a href="#Manual-tasks" class="headerlink" title="Manual tasks"></a>Manual tasks</h3><p>A manual task defines a task that is external to the BPM engine. This is used to model work that is done by somebody who the engine does not need to know of and there is no known system or UI interface.</p><p>For the engine, a manual task is handled as a pass-through activity, automatically continuing the process at the moment the process instance arrives.</p><p>task</p><p>Manual tasks have no real benefit for automating processes. Manual tasks instead provide insights into the tasks that are performed outside of the process engine.</p><h2 id="Gateways"><a href="#Gateways" class="headerlink" title="Gateways"></a>Gateways</h2><h3 id="Exclusive-gateway"><a href="#Exclusive-gateway" class="headerlink" title="Exclusive gateway"></a>Exclusive gateway</h3><p><strong>独占网关</strong>（也称为 <code>XOR 网关</code>，或者更专业地说，称为基于数据的<code>专用网关</code>）用于对流程中的决策进行建模。当执行到达此网关时，将按定义的顺序评估所有传出序列流。选择条件计算结果为<code>true</code>的序列流（或者没有设置条件，在概念上在序列流上定义了<code>true</code>值）以继续该过程。</p><p>使用独占网关时，仅选择一个序列流。如果多个序列流具有计算结果为<code>true</code>的条件，则以独占方式选择 XML 中定义的第一个序列流以继续该过程。</p><p>如果无法选择任何序列流（没有条件的计算结果为<code>true</code>），这将导致运行时异常，除非您定义了默认流。</p><h3 id="Parallel-gateway"><a href="#Parallel-gateway" class="headerlink" title="Parallel gateway"></a>Parallel gateway</h3><p>网关还可用于对进程中的并发性进行建模。在流程模型中引入并发性的最直接的网关是<strong>并行网关</strong>，它允许分叉到多个执行路径或连接多个传入的执行路径。</p><p>并行网关的功能基于传入和传出序列流：<br>fork：并行跟踪所有传出序列流，为每个序列流创建一个并发执行。<br>join：到达并行网关的所有并发执行在网关处等待，直到每个传入序列流的执行到达。然后，该过程继续通过加入网关。</p><blockquote><p>注意：在 Camunda 的并行网关实现中，一旦以下情况成立，网关就会触发：到达的令牌数等于传入序列流的数量。不需要在每个传入流上都有令牌到达。</p></blockquote><h3 id="Event-based-gateway"><a href="#Event-based-gateway" class="headerlink" title="Event-based gateway"></a>Event-based gateway</h3><p>基于事件的网关允许您根据事件做出决策。网关的每个传出序列流都需要连接到一个中间捕获事件。当流程执行到达基于事件的网关时，网关的行为类似于等待状态：执行挂起。此外，还会为每个传出序列流创建一个事件订阅。</p><p>请注意，从基于事件的网关流流出的序列流与普通序列流不同。这些序列流从未实际<code>执行</code>。相反，它们允许流程引擎确定到达基于事件的网关的执行需要订阅哪些事件。以下限制适用：</p><ul><li>基于事件的网关必须具有两个或多个传出序列流。</li><li>基于事件的网关后面只能跟有中间缓存事件类型的元素。（引擎尚不支持在基于事件的网关之后接收任务。</li><li>连接到基于事件的网关的中间缓存事件必须具有单个传入序列流。</li></ul><h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><h2 id="Subprocesses"><a href="#Subprocesses" class="headerlink" title="Subprocesses"></a>Subprocesses</h2><h2 id="Markers"><a href="#Markers" class="headerlink" title="Markers"></a>Markers</h2>]]></content>
      
      
      <categories>
          
          <category> Camunda </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Camunda Quick Start</title>
      <link href="/2022/06/20/camunda/01-camunda-liu-cheng-yin-qing-kuai-su-kai-shi/"/>
      <url>/2022/06/20/camunda/01-camunda-liu-cheng-yin-qing-kuai-su-kai-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This tutorial guides you through modeling and implementing your first workflow with the Camunda Platform. In this guide, you’ll choose between implementing executable processes in Java or JavaScript (NodeJS) using one of Camunda’s ready-to-go task clients.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Camunda </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nacos 服务注册发现和配置</title>
      <link href="/2022/06/15/alibaba/nacos/01-nacos-jie-shao-he-jian-dan-ying-yong/"/>
      <url>/2022/06/15/alibaba/nacos/01-nacos-jie-shao-he-jian-dan-ying-yong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Nacos </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch 基本概念（二）</title>
      <link href="/2022/06/07/elasticsearch/03-elasticsearch-ji-ben-gai-nian/"/>
      <url>/2022/06/07/elasticsearch/03-elasticsearch-ji-ben-gai-nian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Elasticsearch 是一款开源的全文搜索与分析引擎，它拥有高扩展、大容量数据的存储和处理特性，有着近乎实时的处理效果。Elasticsearch 的使用场景还是比较多的，比如 APP 的搜索服务、ELK 实现日志收集与分析、BI 商业智能等。本文会逐步引导大家进入 elasticsearch 的世界，初步窥探它的使用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Elastic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch 深入搜索</title>
      <link href="/2022/06/07/elasticsearch/04-shen-ru-sou-suo/"/>
      <url>/2022/06/07/elasticsearch/04-shen-ru-sou-suo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本章会解释如何索引和查询我们的数据让我们能利用词的相似度（word proximity）、部分匹配（partial matching）、模糊匹配（fuzzy matching）以及语言感知（language awareness）这些优势。理解每个查询如何贡献相关度评分 _score 有助于调试我们的查询：确保我们认为的最佳匹配文档出现在结果首页，以及削减结果中几乎不相关的 “长尾（long tail）”。</p></blockquote><h2 id="结构化搜索"><a href="#结构化搜索" class="headerlink" title="结构化搜索"></a>结构化搜索</h2><h3 id="精确值查找"><a href="#精确值查找" class="headerlink" title="精确值查找"></a>精确值查找</h3><pre class="language-bash" data-language="bash"><code class="language-bash">POST /my_store/products/_bulk<span class="token punctuation">&#123;</span> <span class="token string">"index"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span> <span class="token string">"_id"</span><span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token string">"price"</span> <span class="token builtin class-name">:</span> <span class="token number">10</span>, <span class="token string">"productID"</span> <span class="token builtin class-name">:</span> <span class="token string">"XHDK-A-1293-#fJ3"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token string">"index"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span> <span class="token string">"_id"</span><span class="token builtin class-name">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token string">"price"</span> <span class="token builtin class-name">:</span> <span class="token number">20</span>, <span class="token string">"productID"</span> <span class="token builtin class-name">:</span> <span class="token string">"KDKE-B-9947-#kL5"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token string">"index"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span> <span class="token string">"_id"</span><span class="token builtin class-name">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token string">"price"</span> <span class="token builtin class-name">:</span> <span class="token number">30</span>, <span class="token string">"productID"</span> <span class="token builtin class-name">:</span> <span class="token string">"JODL-X-1937-#pV7"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token string">"index"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span> <span class="token string">"_id"</span><span class="token builtin class-name">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token string">"price"</span> <span class="token builtin class-name">:</span> <span class="token number">30</span>, <span class="token string">"productID"</span> <span class="token builtin class-name">:</span> <span class="token string">"QQPX-R-3956-#aD8"</span> <span class="token punctuation">&#125;</span>GET /my_store/_searchPOST /my_store/products/_search<span class="token punctuation">&#123;</span>    <span class="token string">"query"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"constant_score"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>             <span class="token string">"filter"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"term"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                     <span class="token string">"price"</span> <span class="token builtin class-name">:</span> <span class="token number">20</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>GET /my_store/products/_search<span class="token punctuation">&#123;</span>    <span class="token string">"query"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"constant_score"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"filter"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"term"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"productID"</span> <span class="token builtin class-name">:</span> <span class="token string">"KDKE-B-9947-#kL5"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>GET /my_store/_analyze<span class="token punctuation">&#123;</span>  <span class="token string">"field"</span><span class="token builtin class-name">:</span> <span class="token string">"productID"</span>,  <span class="token string">"text"</span><span class="token builtin class-name">:</span> <span class="token string">"XHDK-A-1293-#fJ3"</span><span class="token punctuation">&#125;</span>DELETE /my_store PUT /my_store <span class="token punctuation">&#123;</span>    <span class="token string">"mappings"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"products"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"properties"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"productID"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"type"</span> <span class="token builtin class-name">:</span> <span class="token string">"string"</span>,                    <span class="token string">"index"</span> <span class="token builtin class-name">:</span> <span class="token string">"not_analyzed"</span>                 <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>GET /my_store/products/_search<span class="token punctuation">&#123;</span>    <span class="token string">"query"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"constant_score"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"filter"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"term"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"productID"</span> <span class="token builtin class-name">:</span> <span class="token string">"XHDK-A-1293-#fJ3"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="组合过滤器"><a href="#组合过滤器" class="headerlink" title="组合过滤器"></a>组合过滤器</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> product<span class="token keyword">FROM</span>   products<span class="token keyword">WHERE</span>  <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">OR</span> productID <span class="token operator">=</span> <span class="token string">"XHDK-A-1293-#fJ3"</span><span class="token punctuation">)</span>  <span class="token operator">AND</span>  <span class="token punctuation">(</span>price <span class="token operator">!=</span> <span class="token number">30</span><span class="token punctuation">)</span></code></pre><h4 id="布尔过滤器"><a href="#布尔过滤器" class="headerlink" title="布尔过滤器"></a>布尔过滤器</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>   <span class="token string">"bool"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"must"</span> <span class="token builtin class-name">:</span>     <span class="token punctuation">[</span><span class="token punctuation">]</span>,      <span class="token string">"should"</span> <span class="token builtin class-name">:</span>   <span class="token punctuation">[</span><span class="token punctuation">]</span>,      <span class="token string">"must_not"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>must：所有的语句都 必须（must） 匹配，与 AND 等价。</li><li>must_not：所有的语句都 不能（must not） 匹配，与 NOT 等价。</li><li>should：至少有一个语句要匹配，与 OR 等价。</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">GET /my_store/products/_search<span class="token punctuation">&#123;</span>   <span class="token string">"query"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"filtered"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"filter"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"bool"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>              <span class="token string">"should"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                 <span class="token punctuation">&#123;</span> <span class="token string">"term"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token string">"price"</span> <span class="token builtin class-name">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>,                  <span class="token punctuation">&#123;</span> <span class="token string">"term"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token string">"productID"</span> <span class="token builtin class-name">:</span> <span class="token string">"XHDK-A-1293-#fJ3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>               <span class="token punctuation">]</span>,              <span class="token string">"must_not"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                 <span class="token string">"term"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token string">"price"</span> <span class="token builtin class-name">:</span> <span class="token number">30</span><span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="嵌套布尔过滤器"><a href="#嵌套布尔过滤器" class="headerlink" title="嵌套布尔过滤器"></a>嵌套布尔过滤器</h4><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> document<span class="token keyword">FROM</span>   products<span class="token keyword">WHERE</span>  productID      <span class="token operator">=</span> <span class="token string">"KDKE-B-9947-#kL5"</span>  <span class="token operator">OR</span> <span class="token punctuation">(</span>     productID <span class="token operator">=</span> <span class="token string">"JODL-X-1937-#pV7"</span>       <span class="token operator">AND</span> price     <span class="token operator">=</span> <span class="token number">30</span> <span class="token punctuation">)</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">GET /my_store/products/_search<span class="token punctuation">&#123;</span>   <span class="token string">"query"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"filtered"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>         <span class="token string">"filter"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"bool"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>              <span class="token string">"should"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span> <span class="token string">"term"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token string">"productID"</span> <span class="token builtin class-name">:</span> <span class="token string">"KDKE-B-9947-#kL5"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>,                 <span class="token punctuation">&#123;</span> <span class="token string">"bool"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                   <span class="token string">"must"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span> <span class="token string">"term"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token string">"productID"</span> <span class="token builtin class-name">:</span> <span class="token string">"JODL-X-1937-#pV7"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>,                     <span class="token punctuation">&#123;</span> <span class="token string">"term"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token string">"price"</span> <span class="token builtin class-name">:</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>                   <span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>              <span class="token punctuation">]</span>           <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="查询多个精确值"><a href="#查询多个精确值" class="headerlink" title="查询多个精确值"></a>查询多个精确值</h3><p>不需要使用多个 term 查询，我们只要用单个 terms 查询（注意末尾的 s ）， terms 查询好比是 term 查询的复数形式（以英语名词的单复数做比）。</p><p>它几乎与 term 的使用方式一模一样，与指定单个价格不同，我们只要将 term 字段的值改为数组即可：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>    <span class="token string">"terms"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"price"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">20</span>, <span class="token number">30</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">GET /my_store/products/_search<span class="token punctuation">&#123;</span>    <span class="token string">"query"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"constant_score"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"filter"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"terms"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                     <span class="token string">"price"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">20</span>, <span class="token number">30</span><span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="包含，而不是相等"><a href="#包含，而不是相等" class="headerlink" title="包含，而不是相等"></a>包含，而不是相等</h4><p>一定要了解 term 和 terms 是 包含（contains） 操作，而非 等值（equals） （判断）。 如何理解这句话呢？</p><p>如果我们有一个 term（词项）过滤器 { “term” : { “tags” : “search” } } ，它会与以下两个文档 同时 匹配：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span> <span class="token string">"tags"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"search"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token string">"tags"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"search"</span>, <span class="token string">"open_source"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> </code></pre><p>Elasticsearch 会在倒排索引中查找包括某 term 的所有文档，然后构造一个 bitset 。在我们的例子中，倒排索引表如下：</p><table><thead><tr><th align="left">Token</th><th align="left">DocIDs</th></tr></thead><tbody><tr><td align="left">open_source</td><td align="left">2</td></tr><tr><td align="left">search</td><td align="left">1,2</td></tr></tbody></table><p>当 term 查询匹配标记 search 时，它直接在倒排索引中找到记录并获取相关的文档 ID，如倒排索引所示，这里文档 1 和文档 2 均包含该标记，所以两个文档会同时作为结果返回。</p><h4 id="精确相等"><a href="#精确相等" class="headerlink" title="精确相等"></a>精确相等</h4><p>如果一定期望得到我们前面说的那种行为（即整个字段完全相等），最好的方式是增加并索引另一个字段， 这个字段用以存储该字段包含词项的数量，同样以上面提到的两个文档为例，现在我们包括了一个维护标签数的新字段：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span> <span class="token string">"tags"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"search"</span><span class="token punctuation">]</span>, <span class="token string">"tag_count"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token string">"tags"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"search"</span>, <span class="token string">"open_source"</span><span class="token punctuation">]</span>, <span class="token string">"tag_count"</span> <span class="token builtin class-name">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">GET /my_index/my_type/_search<span class="token punctuation">&#123;</span>    <span class="token string">"query"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"constant_score"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"filter"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                 <span class="token string">"bool"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"must"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                        <span class="token punctuation">&#123;</span> <span class="token string">"term"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span> <span class="token string">"tags"</span> <span class="token builtin class-name">:</span> <span class="token string">"search"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>,                         <span class="token punctuation">&#123;</span> <span class="token string">"term"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span> <span class="token string">"tag_count"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>                     <span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Elastic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch 基本概念（一）</title>
      <link href="/2022/06/06/elasticsearch/02-elasticsearch-ji-ben-gai-nian/"/>
      <url>/2022/06/06/elasticsearch/02-elasticsearch-ji-ben-gai-nian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Elasticsearch 是一款开源的全文搜索与分析引擎，它拥有高扩展、大容量数据的存储和处理特性，有着近乎实时的处理效果。Elasticsearch 的使用场景还是比较多的，比如 APP 的搜索服务、ELK 实现日志收集与分析、BI 商业智能等。本文会逐步引导大家进入 elasticsearch 的世界，初步窥探它的使用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Elastic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch 介绍及下载安装</title>
      <link href="/2022/06/05/elasticsearch/01-elasticsearch-jie-shao/"/>
      <url>/2022/06/05/elasticsearch/01-elasticsearch-jie-shao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Elasticsearch 是一款开源的全文搜索与分析引擎，它拥有高扩展、大容量数据的存储和处理特性，有着近乎实时的处理效果。Elasticsearch 的使用场景还是比较多的，比如 APP 的搜索服务、ELK 实现日志收集与分析、BI 商业智能等。本文会逐步引导大家进入 elasticsearch 的世界，初步窥探它的使用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Elastic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Gateway 介绍</title>
      <link href="/2022/06/01/spring/cloud/01-springcloud-gateway/"/>
      <url>/2022/06/01/spring/cloud/01-springcloud-gateway/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要内容为 Spring 生态系统之上的 API 网关的基础知识，该项目包括: Spring 5、 Spring Boot 2 和 Project Reactor。Spring Cloud Gateway 旨在提供一种简单而有效的方法来路由到 API，并为它们提供交叉关注点，如安全性、监视&#x2F;度量和弹性。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Sentinel 限流集成和上线改造</title>
      <link href="/2022/05/01/alibaba/sentinel/02-sentinel-xian-liu-ji-cheng-fang-an-he-shang-xian-gai-zao/"/>
      <url>/2022/05/01/alibaba/sentinel/02-sentinel-xian-liu-ji-cheng-fang-an-he-shang-xian-gai-zao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要内容为项目集成Sentinel进行限流降级的解决方案和上线改造内容。通过对Sentinel的控制台进行深度改造和集成，可以使项目内所有微服务的资源规则能够动态的修改和新增，各个服务可以及时监听并更新规则。本文改造方案基于Nacos配置中心进行规则的持久化，对各个微服务来说是底侵入性的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Sentinel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Sentinel 高可用流量控制组件</title>
      <link href="/2022/04/30/alibaba/sentinel/01-sentinel-gao-ke-yong-liu-liang-kong-zhi-zu-jian/"/>
      <url>/2022/04/30/alibaba/sentinel/01-sentinel-gao-ke-yong-liu-liang-kong-zhi-zu-jian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 是面向分布式服务架构的流量控制组件，主要以流量为切入点，从限流、流量整形、熔断降级、系统负载保护、热点防护等多个维度来帮助开发者保障微服务的稳定性。本文主要涉及<code>Sentinel</code>内各种规则的基本概念和使用场景。<br>更多详情请参考：<a href="https://sentinelguard.io/zh-cn/docs/introduction.html">官方文档</a></p></blockquote><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><hr><p>FlowSlot 会根据预设的规则，结合前面 <code>NodeSelectorSlot</code>、<code>ClusterNodeBuilderSlot</code>、<code>StatistcSlot</code> 统计出来的实时信息进行流量控制。</p><p>限流的直接表现是在执行 <code>Entry nodeA = SphU.entry(资源名字)</code> 的时候抛出 <code>FlowException</code> 异常。<code>FlowException</code> 是 <code>BlockException</code> 的子类，您可以捕捉 BlockException 来自定义被限流之后的处理逻辑。</p><p>同一个资源可以对应多条限流规则。<code>FlowSlot</code> 会对该资源的所有限流规则依次遍历，直到有规则触发限流或者所有规则遍历完毕。</p><p>一条限流规则主要由下面几个因素组成，我们可以组合这些元素来实现不同的限流效果：</p><ul><li>resource：资源名，即限流规则的作用对象</li><li>count: 限流阈值</li><li>grade: 限流阈值类型，QPS 或线程数</li><li>strategy: 根据调用关系选择策略</li></ul><h3 id="基于-QPS-x2F-并发数的流量控制"><a href="#基于-QPS-x2F-并发数的流量控制" class="headerlink" title="基于 QPS&#x2F;并发数的流量控制"></a>基于 QPS&#x2F;并发数的流量控制</h3><hr><p>流量控制主要有两种统计类型，一种是统计<code>线程数</code>，另外一种则是统计 <code>QPS</code>。类型由 <code>FlowRule.grade</code> 字段来定义。其中，<code>0</code> 代表根据并发数量来限流，<code>1</code> 代表根据 <code>QPS</code> 来进行流量控制。其中<code>线程数</code>、<code>QPS</code> 值，都是由 <code>StatisticSlot</code> 实时统计获取的。</p><p>可以通过下面的命令查看实时统计信息：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://localhost:8719/cnode?id<span class="token operator">=</span>resourceName</code></pre><p>输出内容格式如下：</p><table><thead><tr><th align="center">idx</th><th align="center">id</th><th align="center">thread</th><th align="center">pass</th><th align="center">blocked</th><th align="center">success</th><th align="center">total</th><th align="center">Rt</th><th align="center">1m-pass</th><th align="center">1m-block</th><th align="center">1m-all</th><th align="center">exeption</th></tr></thead><tbody><tr><td align="center">2</td><td align="center">abc647</td><td align="center">0</td><td align="center">46</td><td align="center">0</td><td align="center">46</td><td align="center">46</td><td align="center">1</td><td align="center">2763</td><td align="center">0</td><td align="center">2763</td><td align="center">0</td></tr></tbody></table><ul><li>thread： 代表当前处理该资源的线程数；</li><li>pass： 代表一秒内到来到的请求；</li><li>blocked： 代表一秒内被流量控制的请求数量；</li><li>success： 代表一秒内成功处理完的请求；</li><li>total： 代表到一秒内到来的请求以及被阻止的请求总和；</li><li>RT： 代表一秒内该资源的平均响应时间；</li><li>1m-pass： 则是一分钟内到来的请求；</li><li>1m-block： 则是一分钟内被阻止的请求；</li><li>1m-all： 则是一分钟内到来的请求和被阻止的请求的总和；</li><li>exception： 则是一秒内业务本身异常的总和。</li></ul><h4 id="并发线程数流量控制"><a href="#并发线程数流量控制" class="headerlink" title="并发线程数流量控制"></a>并发线程数流量控制</h4><hr><p><code>线程数限流</code>用于保护业务线程数不被耗尽。</p><p>例如，当应用所依赖的下游应用由于某种原因导致服务不稳定、响应延迟增加，对于调用者来说，意味着吞吐量下降和更多的线程数占用，极端情况下甚至导致线程池耗尽。为应对高线程占用的情况，业内有使用隔离的方案，比如通过不同业务逻辑使用不同线程池来隔离业务自身之间的资源争抢（线程池隔离），或者使用信号量来控制同时请求的个数（信号量隔离）。这种隔离方案虽然能够控制线程数量，但无法控制请求排队时间。当请求过多时排队也是无益的，直接拒绝能够迅速降低系统压力。<code>Sentinel线程数限流不负责创建和管理线程池，而是简单统计当前请求上下文的线程个数，如果超出阈值，新的请求会被立即拒绝</code>。</p><h4 id="QPS流量控制"><a href="#QPS流量控制" class="headerlink" title="QPS流量控制"></a>QPS流量控制</h4><hr><p>当 <code>QPS</code> 超过某个阈值的时候，则采取措施进行流量控制。流量控制的手段包括下面 3 种，对应 FlowRule 中的 controlBehavior 字段：</p><p><code>直接拒绝</code>（RuleConstant.CONTROL_BEHAVIOR_DEFAULT）方式。该方式是默认的流量控制方式，当QPS超过任意规则的阈值后，新的请求就会被立即拒绝，拒绝方式为抛出FlowException。这种方式<strong>适用于对系统处理能力确切已知的情况下</strong>，比如通过压测确定了系统的准确水位时。具体的例子参见 FlowqpsDemo。</p><p><code>冷启动</code>（RuleConstant.CONTROL_BEHAVIOR_WARM_UP）方式。该方式主要用于系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过”冷启动”，<strong>让通过的流量缓慢增加</strong>，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮的情况。具体的例子参见 WarmUpFlowDemo。</p><p>通常冷启动的过程系统允许通过的 QPS 曲线如下图所示：<br><img src="https://user-images.githubusercontent.com/9434884/68292392-b5b0aa00-00c6-11ea-86e1-ecacff8aab51.png" alt="Sentinel冷启动限流请求示意图"></p><p><code>匀速排队</code>（RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER）方式会严格控制请求通过的间隔时间，也即是<strong>让请求以均匀的速度通过</strong>，对应的是漏桶算法。详细文档可以参考 流量控制 - 匀速器模式，具体的例子可以参见 PaceFlowDemo。</p><p>该方式的作用如下图所示：<br><img src="https://user-images.githubusercontent.com/9434884/68292442-d4af3c00-00c6-11ea-8251-d0977366d9b4.png" alt="匀速排队限流方式请求示意图"><br>这种方式主要用于处理间隔性突发的流量，例如消息队列。想象一下这样的场景，在某一秒有大量的请求到来，而接下来的几秒则处于空闲状态，我们希望系统能够在接下来的空闲期间逐渐处理这些请求，而不是在第一秒直接拒绝多余的请求。</p><h3 id="基于调用关系的流量控制"><a href="#基于调用关系的流量控制" class="headerlink" title="基于调用关系的流量控制"></a>基于调用关系的流量控制</h3><hr><p>调用关系包括调用方、被调用方；一个方法又可能会调用其它方法，形成一个调用链路的层次关系。<code>Sentinel</code> 通过 <code>NodeSelectorSlot</code> 建立不同资源间的调用的关系，并且通过 <code>ClusterBuilderSlot</code> 记录每个资源的实时统计信息。</p><p>有了调用链路的统计信息，我们可以衍生出多种流量控制手段。</p><h4 id="根据调用方限流"><a href="#根据调用方限流" class="headerlink" title="根据调用方限流"></a>根据调用方限流</h4><hr><p><code>ContextUtil.enter(resourceName, origin)</code> 方法中的 <code>origin</code> 参数标明了调用方身份。这些信息会在 <code>ClusterBuilderSlot</code> 中被统计。可通过以下命令来展示不同的调用方对同一个资源的调用数据：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://localhost:8719/origin?id<span class="token operator">=</span>nodeA</code></pre><p>调用数据示例：<br>id: nodeA</p><table><thead><tr><th align="center">idx</th><th align="center">origin</th><th align="center">threadNum</th><th align="center">passedQps</th><th align="center">blockedQps</th><th align="center">totalQps</th><th align="center">aRt</th><th align="center">1m-passed</th><th align="center">1m-blocked</th><th align="center">1m-total</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">caller1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">2</td><td align="center">caller2</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><p>上面这个命令展示了资源名为 nodeA 的资源被两个不同的调用方调用的统计。</p><p>流控规则中的 limitApp 字段用于根据调用来源进行流量控制。该字段的值有以下三种选项，分别对应不同的场景：</p><p><code>default</code>：表示<strong>不区分调用者，来自任何调用者的请求都将进行限流统计</strong>。如果这个资源名的调用总和超过了这条规则定义的阈值，则触发限流。<br><code>&#123;some_origin_name&#125;</code>：表示<strong>针对特定的调用者，只有来自这个调用者的请求才会进行流量控制</strong>。例如 NodeA 配置了一条针对调用者caller1的规则，那么当且仅当来自 caller1 对 NodeA 的请求才会触发流量控制。<br><code>other</code>：表示<strong>针对除 {some_origin_name} 以外的其余调用方的流量进行流量控制</strong>。例如，资源NodeA配置了一条针对调用者 caller1 的限流规则，同时又配置了一条调用者为 other 的规则，那么任意来自非 caller1 对 NodeA 的调用，都不能超过 other 这条规则定义的阈值。</p><p>同一个资源名可以配置多条规则，规则的生效顺序为：<code>&#123;some_origin_name&#125; &gt; other &gt; default</code></p><h4 id="链路限流"><a href="#链路限流" class="headerlink" title="链路限流"></a>链路限流</h4><hr><p><code>NodeSelectorSlot</code> 中记录了资源之间的调用链路，这些资源通过调用关系，相互之间构成一棵调用树。这棵树的根节点是一个名字为 <code>machine-root</code> 的虚拟节点，调用链的入口都是这个虚节点的子节点。</p><p>一棵典型的调用树如下图所示：</p><pre class="language-bash" data-language="bash"><code class="language-bash">             machine-root              /       <span class="token punctuation">\</span>             /         <span class="token punctuation">\</span>       Entrance1     Entrance2          /             <span class="token punctuation">\</span>         /               <span class="token punctuation">\</span>DefaultNode<span class="token punctuation">(</span>nodeA<span class="token punctuation">)</span>   DefaultNode<span class="token punctuation">(</span>nodeA<span class="token punctuation">)</span></code></pre><p>上图中来自入口 <code>Entrance1</code> 和 <code>Entrance2</code> 的请求都调用到了资源 NodeA，<code>Sentinel</code> <strong>允许只根据某个入口的统计信息对资源限流</strong>。比如我们可以设置 FlowRule.strategy 为 RuleConstant.CHAIN，同时设置 FlowRule.ref_identity 为 Entrance1 来表示只有从入口 Entrance1 的调用才会记录到 NodeA 的限流统计当中，而对来自 Entrance2 的调用漠不关心。</p><p>调用链的入口是通过 API 方法 <code>ContextUtil.enter(name)</code> 定义的。</p><h4 id="关联流量控制"><a href="#关联流量控制" class="headerlink" title="关联流量控制"></a>关联流量控制</h4><hr><p><code>当两个资源之间具有资源争抢或者依赖关系的时候，这两个资源便具有了关联</code>。比如对数据库同一个字段的读操作和写操作存在争抢，读的速度过高会影响写得速度，写的速度过高会影响读的速度。如果放任读写操作争抢资源，则争抢本身带来的开销会降低整体的吞吐量。可使用关联限流来避免具有关联关系的资源之间过度的争抢，举例来说，<code>read_db</code> 和 <code>write_db</code> 这两个资源分别代表数据库读写，我们可以给 <code>read_db</code> 设置限流规则来达到写优先的目的：设置 <code>FlowRule.strategy</code> 为 <code>RuleConstant.RELATE</code> 同时设置 <code>FlowRule.ref_identity</code> 为 <code>write_db</code>。这样当写库操作过于频繁时，读数据的请求会被限流。</p><h2 id="网关限流"><a href="#网关限流" class="headerlink" title="网关限流"></a>网关限流</h2><hr><h3 id="网关流控实现原理"><a href="#网关流控实现原理" class="headerlink" title="网关流控实现原理"></a>网关流控实现原理</h3><hr><p>当通过 <code>GatewayRuleManager</code> 加载网关流控规则（<code>GatewayFlowRule</code>）时，无论是否针对请求属性进行限流，<code>Sentinel</code> 底层都会将网关流控规则转化为热点参数规则（<code>ParamFlowRule</code>），存储在 <code>GatewayRuleManager</code> 中，与正常的热点参数规则相隔离。转换时 <code>Sentinel</code> 会根据请求属性配置，为网关流控规则设置参数索引（<code>idx</code>），并同步到生成的热点参数规则中。</p><p>外部请求进入 <code>API Gateway</code> 时会经过 <code>Sentinel</code> 实现的 <code>filter</code>，其中会依次进行 <code>路由/API 分组匹配</code>、<code>请求属性解析</code>和<code>参数组装</code>。<code>Sentinel</code> 会根据配置的网关流控规则来解析请求属性，并依照参数索引顺序组装参数数组，最终传入 <code>SphU.entry(res, args)</code> 中。<code>Sentinel API Gateway Adapter Common</code> 模块向 <code>Slot Chain</code> 中添加了一个 <code>GatewayFlowSlot</code>，专门用来做网关规则的检查。<code>GatewayFlowSlot</code> 会从 <code>GatewayRuleManager</code> 中提取生成的热点参数规则，根据传入的参数依次进行规则检查。若某条规则不针对请求属性，则会在参数最后一个位置置入预设的常量，达到普通流控的效果。<br><img src="https://user-images.githubusercontent.com/9434884/58381786-5406f280-7ff4-11e9-9020-016ccaf7ab7d.png" alt="网关流控原理示意图"></p><h3 id="网关流控控制台"><a href="#网关流控控制台" class="headerlink" title="网关流控控制台"></a>网关流控控制台</h3><hr><p><code>Sentinel 1.6.3</code> 引入了网关流控控制台的支持，用户可以直接在 <code>Sentinel 控制台</code>上查看 <code>API Gateway</code> 实时的 <code>route</code> 和<code>自定义 API 分组</code>监控，管理<code>网关规则</code>和 <code>API 分组配置</code>。</p><p>在 <code>API Gateway</code> 端，用户只需要在原有启动参数的基础上添加如下启动参数即可标记应用为 <code>API Gateway</code> 类型：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 注：通过 Spring Cloud Alibaba Sentinel 自动接入的 API Gateway 整合则无需此参数</span>-Dcsp.sentinel.app.type<span class="token operator">=</span><span class="token number">1</span></code></pre><p>添加正确的启动参数并有访问量后，我们就可以在 Sentinel 上面看到对应的 API Gateway 了。我们可以查看实时的 route 和自定义 API 分组的监控和调用信息，并针对其配置规则：<br><img src="https://camo.githubusercontent.com/48d3f1037415b9214decfbff074dbeb4808971f7ef06a3937cec02523f6a3185/68747470733a2f2f73656e74696e656c67756172642e696f2f626c6f672f7a682d636e2f696d672f73656e74696e656c2d64617368626f6172642d6170692d676174657761792d726f7574652d6c6973742e706e67" alt="网关流控控制台"></p><h3 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h3><hr><p>从 1.6.0 版本开始，Sentinel 提供了 Spring Cloud Gateway 的适配模块，可以提供两种资源维度的限流：</p><ul><li>route 维度：即在 Spring 配置文件中配置的路由条目，资源名为对应的 routeId</li><li>自定义 API 维度：用户可以利用 Sentinel 提供的 API 来自定义一些 API 分组<br>使用时需引入以下模块（以 Maven 为例）：</li></ul><pre class="language-pom" data-language="pom"><code class="language-pom">&lt;dependency&gt;    &lt;groupId&gt;com.alibaba.csp&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;sentinel-spring-cloud-gateway-adapter&lt;&#x2F;artifactId&gt;    &lt;version&gt;x.y.z&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><p>使用时只需注入对应的 SentinelGatewayFilter 实例以及 SentinelGatewayBlockExceptionHandler 实例即可（若使用了 Spring Cloud Alibaba Sentinel，则只需按照<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel#spring-cloud-gateway-%E6%94%AF%E6%8C%81">文档</a>进行配置即可，无需自己加 Configuration）。比如：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ViewResolver</span><span class="token punctuation">></span></span> viewResolvers<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ServerCodecConfigurer</span> serverCodecConfigurer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">GatewayConfiguration</span><span class="token punctuation">(</span><span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">ViewResolver</span><span class="token punctuation">></span><span class="token punctuation">></span></span> viewResolversProvider<span class="token punctuation">,</span>                                <span class="token class-name">ServerCodecConfigurer</span> serverCodecConfigurer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>viewResolvers <span class="token operator">=</span> viewResolversProvider<span class="token punctuation">.</span><span class="token function">getIfAvailable</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token operator">::</span><span class="token function">emptyList</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>serverCodecConfigurer <span class="token operator">=</span> serverCodecConfigurer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token class-name">Ordered</span><span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">SentinelGatewayBlockExceptionHandler</span> <span class="token function">sentinelGatewayBlockExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Register the block exception handler for Spring Cloud Gateway.</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SentinelGatewayBlockExceptionHandler</span><span class="token punctuation">(</span>viewResolvers<span class="token punctuation">,</span> serverCodecConfigurer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token class-name">Ordered</span><span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">GlobalFilter</span> <span class="token function">sentinelGatewayFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SentinelGatewayFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>Demo 示例：<a href="https://github.com/alibaba/Sentinel/tree/master/sentinel-demo/sentinel-demo-spring-cloud-gateway">sentinel-demo-spring-cloud-gateway</a></p><p>比如我们在 Spring Cloud Gateway 中配置了以下路由：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8090</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">lower-case-service-id</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token comment"># Add your routes here.</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> product_route          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//product          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/product/<span class="token important">**</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> httpbin_route          <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//httpbin.org          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/httpbin/<span class="token important">**</span>          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> RewritePath=/httpbin/(<span class="token punctuation">?</span>&lt;segment<span class="token punctuation">></span>.<span class="token important">*)</span><span class="token punctuation">,</span> /$\<span class="token punctuation">&#123;</span>segment<span class="token punctuation">&#125;</span></code></pre><p>同时自定义了一些 API 分组：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initCustomizedApis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApiDefinition</span><span class="token punctuation">></span></span> definitions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ApiDefinition</span> api1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApiDefinition</span><span class="token punctuation">(</span><span class="token string">"some_customized_api"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setPredicateItems</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApiPredicateItem</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApiPathPredicateItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPattern</span><span class="token punctuation">(</span><span class="token string">"/product/baz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApiPathPredicateItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPattern</span><span class="token punctuation">(</span><span class="token string">"/product/foo/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setMatchStrategy</span><span class="token punctuation">(</span><span class="token class-name">SentinelGatewayConstants</span><span class="token punctuation">.</span>URL_MATCH_STRATEGY_PREFIX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ApiDefinition</span> api2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApiDefinition</span><span class="token punctuation">(</span><span class="token string">"another_customized_api"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setPredicateItems</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApiPredicateItem</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApiPathPredicateItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPattern</span><span class="token punctuation">(</span><span class="token string">"/ahas"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    definitions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>api1<span class="token punctuation">)</span><span class="token punctuation">;</span>    definitions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>api2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">GatewayApiDefinitionManager</span><span class="token punctuation">.</span><span class="token function">loadApiDefinitions</span><span class="token punctuation">(</span>definitions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>那么这里面的 route ID（如 product_route）和 API name（如 some_customized_api）都会被标识为 Sentinel 的资源。比如访问网关的 URL 为 <a href="http://localhost:8090/product/foo/22">http://localhost:8090/product/foo/22</a> 的时候，对应的统计会加到 product_route 和 some_customized_api 这两个资源上面，而 <a href="http://localhost:8090/httpbin/json">http://localhost:8090/httpbin/json</a> 只会对应到 httpbin_route 资源上面。</p><p><strong>注意</strong>：</p><p>有的时候 Spring Cloud Gateway 会自己在 route 名称前面拼一个前缀，如 ReactiveCompositeDiscoveryClient_xxx 这种。请观察簇点链路页面实际的资源名。</p><p>您可以在 GatewayCallbackManager 注册回调进行定制：</p><ul><li>setBlockHandler：注册函数用于实现自定义的逻辑处理被限流的请求，对应接口为 BlockRequestHandler。默认实现为 DefaultBlockRequestHandler，当被限流时会返回类似于下面的错误信息：Blocked by Sentinel: FlowException。</li></ul><p><strong>注意</strong>：</p><ul><li>Sentinel 网关流控默认的粒度是 route 维度以及自定义 API 分组维度，默认不支持 URL 粒度。若通过 Spring Cloud Alibaba 接入，请将 spring.cloud.sentinel.filter.enabled 配置项置为 false（若在网关流控控制台上看到了 URL 资源，就是此配置项没有置为 false）。</li><li>若使用 Spring Cloud Alibaba Sentinel 数据源模块，需要注意网关流控规则数据源类型是 gw-flow，若将网关流控规则数据源指定为 flow 则不生效。</li></ul><h2 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h2><hr><h2 id="热点参数"><a href="#热点参数" class="headerlink" title="热点参数"></a>热点参数</h2><hr><h2 id="系统保护"><a href="#系统保护" class="headerlink" title="系统保护"></a>系统保护</h2><hr><h2 id="来源控制"><a href="#来源控制" class="headerlink" title="来源控制"></a>来源控制</h2><hr>]]></content>
      
      
      <categories>
          
          <category> Sentinel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 使用问题记录</title>
      <link href="/2022/04/23/mongodb/mongodb-wen-ti-ji-lu/"/>
      <url>/2022/04/23/mongodb/mongodb-wen-ti-ji-lu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要记录在项目当中集成<code>MongoDB</code>作为日志存储库时遇到的一些问题。本文将会是一个关于<code>MongoDB</code>使用的笼统记载，因为这也是作者第一次在项目当中集成<code>MongoDB</code>，针对许多问题并不全面了解，这里只能对在使用过程中遇到的一些零碎问题进行记录。</p></blockquote><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>关于<code>MongoDB</code>更多技术及概念知识，可前往官方文档进行学习。<br>1、<a href="https://www.mongodb.com/">MongoDB 官网</a><br>2、<a href="https://www.mongodb.org.cn/">MongoDB 中文网</a></p><h2 id="MomgoDB-分页查询跳页过大导致查询失败"><a href="#MomgoDB-分页查询跳页过大导致查询失败" class="headerlink" title="MomgoDB 分页查询跳页过大导致查询失败"></a>MomgoDB 分页查询跳页过大导致查询失败</h2><p>默认缓存大小32MB</p><h2 id="Spring-Data-MongoDB-接入"><a href="#Spring-Data-MongoDB-接入" class="headerlink" title="Spring Data MongoDB 接入"></a>Spring Data MongoDB 接入</h2><h3 id="Spring-MongoDB-配置密码问题"><a href="#Spring-MongoDB-配置密码问题" class="headerlink" title="Spring MongoDB 配置密码问题"></a>Spring MongoDB 配置密码问题</h3><p>密码中含有特殊字符编码问题</p><h3 id="Spring-MongoDB-分页工具封装"><a href="#Spring-MongoDB-分页工具封装" class="headerlink" title="Spring MongoDB 分页工具封装"></a>Spring MongoDB 分页工具封装</h3><p>分页工具封装</p><h3 id="Spring-MongoDB-查询条件封装"><a href="#Spring-MongoDB-查询条件封装" class="headerlink" title="Spring MongoDB 查询条件封装"></a>Spring MongoDB 查询条件封装</h3><p>查询条件</p><h3 id="Spring-MongoDB-聚合分组查询"><a href="#Spring-MongoDB-聚合分组查询" class="headerlink" title="Spring MongoDB 聚合分组查询"></a>Spring MongoDB 聚合分组查询</h3><p>聚合分组</p>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中的泛型 详解</title>
      <link href="/2022/04/02/java/generics/01-java-zhong-de-fan-xing/"/>
      <url>/2022/04/02/java/generics/01-java-zhong-de-fan-xing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ava 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 权威指南</title>
      <link href="/2022/04/01/mongodb/mongodb-quan-wei-zhi-nan/"/>
      <url>/2022/04/01/mongodb/mongodb-quan-wei-zhi-nan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要内容为<code>《MongoDB权威指南》</code>学习整理记录。涉及MongoDB数据库，集合，文档，数据类型等基础知识，以及MongoDB的应用、运维和优化等。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中的反射 详解</title>
      <link href="/2022/04/01/java/reflect/01-java-zhong-de-fan-she/"/>
      <url>/2022/04/01/java/reflect/01-java-zhong-de-fan-she/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。而这也是Java被视为动态（或准动态，为啥要说是准动态，因为一般而言的动态语言定义是程序运行时，允许改变程序结构或变量类型，这种语言称为动态语言。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 算法题目</title>
      <link href="/2022/02/28/leetcode/01-shua-ti-ji-lu/"/>
      <url>/2022/02/28/leetcode/01-shua-ti-ji-lu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>算法彰显着个人的编码能力、思维能力以及个人的数学素养。本篇记录LeetCode上刷过的部分题目，用于加强对算法和数据结构知识的了解和巩固。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式高性能可定制化统一发号器</title>
      <link href="/2022/02/15/distribute/01-tong-yi-fa-hao-qi/"/>
      <url>/2022/02/15/distribute/01-tong-yi-fa-hao-qi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文内容主要涉及可定制化的统一发号器的解决方案及实现过程。统一发号器的方案前提是必须满足业务需求，支持定制化，同时需要满足分布式高性能的要求。</p></blockquote><p><img src="/images/distribute/%E7%BB%9F%E4%B8%80%E5%8F%91%E5%8F%B7%E5%99%A8%E6%96%B9%E6%A1%88%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="统一发号器方案示意图"></p>]]></content>
      
      
      <categories>
          
          <category> Distribute </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring核心 MVC请求流程</title>
      <link href="/2022/02/03/spring/framework/03-spring-he-xin-xi-lie-san-mvc-qing-qiu-liu-cheng/"/>
      <url>/2022/02/03/spring/framework/03-spring-he-xin-xi-lie-san-mvc-qing-qiu-liu-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring MVC 是 Spring 在 Spring Container Core 和 AOP 等技术基础上，遵循 Web MVC 的规范推出的 Web 开发框架，目的是为了简化 Java 栈的 Web 开发。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring Framework </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring 核心 面向切面编程</title>
      <link href="/2022/02/02/spring/framework/02-spring-he-xin-xi-lie-er-qie-mian-bian-cheng/"/>
      <url>/2022/02/02/spring/framework/02-spring-he-xin-xi-lie-er-qie-mian-bian-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>面向切面编程（<code>AOP—Aspect Oriented Programming</code>），AOP最早是AOP联盟的组织提出的，指定的一套规范，Spring将AOP的思想引入框架之中，<strong>通过预编译方式和运行期间动态代理</strong>实现程序的统一维护的一种技术。</p></blockquote><h2 id="AOP-介绍"><a href="#AOP-介绍" class="headerlink" title="AOP 介绍"></a>AOP 介绍</h2><hr><p>Spring 框架通过定义<code>切面</code>, 通过拦截<code>切点</code>实现了不同业务模块的解耦，这个就叫<strong>面向切面编程</strong> - <code>Aspect Oriented Programming</code> (AOP)</p><h3 id="AOP与OOP"><a href="#AOP与OOP" class="headerlink" title="AOP与OOP"></a>AOP与OOP</h3><hr><p>先来看一个例子， 如何给如下UserServiceImpl中所有方法添加进入方法的日志：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author Fei.Tu */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * find user list.     *     * @return user list     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">findUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"execute method： findUserList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"pdai"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * add user     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"execute method： addUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// do something</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>将记录日志功能解耦为日志切面，它的目标是解耦。进而引出AOP的理念：<strong>就是将分散在各个业务逻辑代码中相同的代码通过横向切割的方式抽取到一个独立的模块中</strong>！<br><img src="/images/spring/framework/spring-framework-aop-4.png" alt="纵向与横向切入"></p><p>OOP面向对象编程，针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰高效的逻辑单元划分。而AOP则是针对业务处理过程中的切面进行提取，它所面对的是处理过程的某个步骤或阶段，以获得逻辑过程的中各部分之间低耦合的隔离效果。这两种设计思想在目标上有着本质的差异。<br><img src="/images/spring/framework/spring-framework-aop-2.png" alt="OOP与AOP比较"></p><h3 id="Spring-AOP-术语"><a href="#Spring-AOP-术语" class="headerlink" title="Spring AOP 术语"></a>Spring AOP 术语</h3><hr><p>首先从一些重要的AOP概念和术语开始。这些术语不是Spring特有的：</p><ul><li><code>连接点</code>（<strong>Jointpoint</strong>）：表示需要在程序中插入横切关注点的扩展点，连接点可能是类初始化、方法执行、方法调用、字段调用或处理异常等等，Spring只支持方法执行连接点，在AOP中表示为在哪里干； </li><li><code>切入点</code>（<strong>Pointcut</strong>）： 选择一组相关连接点的模式，即可以认为连接点的集合，Spring支持perl5正则表达式和AspectJ切入点模式，Spring默认使用AspectJ语法，在AOP中表示为在哪里干的集合； </li><li><code>通知</code>（<strong>Advice</strong>）：在连接点上执行的行为，通知提供了在AOP中需要在切入点所选择的连接点处进行扩展现有行为的手段；包括前置通知（before advice）、后置通知(after advice)、环绕通知（around advice），在Spring中通过代理模式实现AOP，并通过拦截器模式以环绕连接点的拦截器链织入通知；在AOP中表示为干什么； </li><li><code>方面/切面</code>（<strong>Aspect</strong>）：横切关注点的模块化，比如上边提到的日志组件。可以认为是通知、引入和切入点的组合；在Spring中可以使用Schema和@AspectJ方式进行组织实现；在AOP中表示为在哪干和干什么集合； </li><li><code>引入</code>（<strong>inter-type declaration</strong>）：也称为内部类型声明，为已有的类添加额外新的字段或方法，Spring允许引入新的接口（必须对应一个实现）到所有被代理对象（目标对象）, 在AOP中表示为干什么（引入什么）； </li><li><code>目标对象</code>（<strong>Target Object</strong>）：需要被织入横切关注点的对象，即该对象是切入点选择的对象，需要被通知的对象，从而也可称为被通知对象；由于Spring AOP 通过代理模式实现，从而这个对象永远是被代理对象，在AOP中表示为对谁干； </li><li><code>织入</code>（<strong>Weaving</strong>）：把切面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时（例如使用AspectJ编译器），类加载时和运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。在AOP中表示为怎么实现的； </li><li><code>AOP代理</code>（<strong>AOP Proxy</strong>）：AOP框架使用代理模式创建的对象，从而实现在连接点处插入通知（即应用切面），就是通过代理来对目标对象应用切面。在Spring中，AOP代理可以用JDK动态代理或CGLIB代理实现，而通过拦截器模型应用切面。在AOP中表示为怎么实现的一种典型方式；</li></ul><hr><ul><li><p>通知类型有以下五种：</p></li><li><p><code>前置通知</code>（<strong>Before advice</strong>）：在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。 </p></li><li><p><code>后置通知</code>（<strong>After returning advice</strong>）：在某连接点正常完成后执行的通知：例如，一个方法没有抛出任何异常，正常返回。 </p></li><li><p><code>异常通知</code>（<strong>After throwing advice</strong>）：在方法抛出异常退出时执行的通知。 </p></li><li><p><code>最终通知</code>（<strong>After (finally) advice</strong>）：当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。 </p></li><li><p><code>环绕通知</code>（<strong>Around Advice</strong>）：包围一个连接点的通知，如方法调用。这是最强大的一种通知类型。环绕通知可以在方法调用前后完成自定义的行为。它也会选择是否继续执行连接点或直接返回它自己的返回值或抛出异常来结束执行。</p></li></ul><p><strong>环绕通知</strong>是最常用的通知类型。和<code>AspectJ</code>一样，<code>Spring</code>提供所有类型的通知，推荐使用尽可能简单的通知类型来实现需要的功能。例如，如果你只是需要一个方法的返回值来更新缓存，最好使用后置通知而不是环绕通知，尽管环绕通知也能完成同样的事情。用最合适的通知类型可以使得编程模型变得简单，并且能够避免很多潜在的错误。比如，你不需要在<code>JoinPoint</code>上调用用于环绕通知的<code>proceed()</code>方法，就不会有调用的问题。</p><p><img src="/images/spring/framework/spring-framework-aop-3.png" alt="AOP术语联系"></p><h3 id="Spring-AOP-和-AspectJ"><a href="#Spring-AOP-和-AspectJ" class="headerlink" title="Spring AOP 和 AspectJ"></a>Spring AOP 和 AspectJ</h3><hr><p><code>AspectJ</code>是一个<code>Java</code>实现的AOP框架，它能够对Java代码进行AOP编译（一般在编译期进行），让Java代码具有AspectJ的AOP功能（当然需要特殊的编译器） 可以这样说AspectJ是目前实现AOP框架中最成熟，功能最丰富的语言，更幸运的是，AspectJ与Java程序完全兼容，几乎是无缝关联，因此对于有java编程基础的工程师，上手和使用都非常容易。</p><ul><li>AspectJ是更强的AOP框架，是<strong>实际意义的AOP标准</strong>； </li><li>Spring为何不写类似AspectJ的框架？ Spring AOP使用纯Java实现, 它不需要专门的编译过程, 它一个重要的原则就是无侵入性（non-invasiveness）; Spring 小组完全有能力写类似的框架，只是Spring AOP从来没有打算通过提供一种全面的AOP解决方案来与AspectJ竞争。Spring的开发小组相信<strong>无论是基于代理（proxy-based）的框架如Spring AOP或者是成熟的框架如AspectJ都是很有价值的</strong>，他们之间应该是互补而不是竞争的关系。 </li><li>Spring小组喜欢***@AspectJ注解风格更胜于Spring XML配置***；所以在Spring 2.0使用了和AspectJ 5一样的注解，并使用AspectJ来做切入点解析和匹配。但是，AOP在运行时仍旧是纯的Spring AOP，并不依赖于AspectJ的编译器或者织入器（weaver）。 </li><li>Spring 2.5对AspectJ的支持：在一些环境下，增加了<strong>对AspectJ的装载时编织支持</strong>，同时<strong>提供了一个新的bean切入点</strong>。</li></ul><p>了解AspectJ应用到Java代码的过程（这个过程称为织入），<code>对于织入这个概念，可以简单理解为aspect(切面)应用到目标函数(类)的过程</code>。 </p><p>对于这个过程，一般分为动态织入和静态织入： </p><ul><li><code>动态织入</code>的方式是<strong>在运行时动态将要增强的代码织入到目标类中</strong>，这样往往是通过动态代理技术完成的，如Java JDK的动态代理(Proxy，底层通过反射实现)或者CGLIB的动态代理(底层通过继承实现)，Spring AOP采用的就是基于运行时增强的代理技术。</li><li>ApectJ采用的就是<code>静态织入</code>的方式。ApectJ主要采用的是<strong>编译期织入，在这个期间使用AspectJ的acj编译器(类似javac)把aspect类编译成class字节码后，在java目标类编译时织入，即先编译aspect类再编译目标类</strong>。<br><img src="/images/spring/framework/spring-framework-aop-6.png" alt="ApectJ静态织入示意图"></li></ul><h2 id="AOP-配置方式"><a href="#AOP-配置方式" class="headerlink" title="AOP 配置方式"></a>AOP 配置方式</h2><h2 id="AOP-使用问题记录"><a href="#AOP-使用问题记录" class="headerlink" title="AOP 使用问题记录"></a>AOP 使用问题记录</h2>]]></content>
      
      
      <categories>
          
          <category> Spring Framework </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring核心 控制反转</title>
      <link href="/2022/02/01/spring/framework/01-spring-he-xin-xi-lie-yi-kong-zhi-fan-zhuan/"/>
      <url>/2022/02/01/spring/framework/01-spring-he-xin-xi-lie-yi-kong-zhi-fan-zhuan/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>控制反转</strong>（<code>Ioc</code>—<code>Inversion of Control</code>），不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。</p></blockquote><h2 id="IoC-介绍"><a href="#IoC-介绍" class="headerlink" title="IoC 介绍"></a>IoC 介绍</h2><hr><h3 id="IoC是什么"><a href="#IoC是什么" class="headerlink" title="IoC是什么"></a>IoC是什么</h3><hr><p><code>Ioc—Inversion of Control</code>，即“<code>控制反转</code>”，不是什么技术，而是一种<code>设计思想</code>。在Java开发中，<strong>Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制</strong>。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：</p><ul><li><p><code>谁控制谁，控制什么</code>：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即<strong>由Ioc容器来控制对象的创建</strong>；谁控制谁？当然是<strong>IoC 容器控制了对象</strong>；控制什么？那就是<strong>主要控制了外部资源获取</strong>（不只是对象包括比如文件等）。</p></li><li><p><code>为何是反转，哪些方面反转了</code>：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由<strong>容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转</strong>；哪些方面反转了？<strong>依赖对象的获取被反转了</strong>。</p></li></ul><h3 id="IoC能做什么"><a href="#IoC能做什么" class="headerlink" title="IoC能做什么"></a>IoC能做什么</h3><hr><p><code>IoC不是一种技术，只是一种思想</code>，一个重要的面向对象编程的法则，它能指导我们如何设计出<strong>松耦合</strong>、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以<strong>对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活</strong>。</p><p>其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC&#x2F;DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。</p><p>IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即<strong>由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找</strong>。</p><h3 id="IoC和DI"><a href="#IoC和DI" class="headerlink" title="IoC和DI"></a>IoC和DI</h3><hr><p><code>DI</code>—<code>Dependency Injection</code>，即“依赖注入”：是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p><p>理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：</p><ul><li><code>谁依赖于谁</code>：当然是<strong>应用程序依赖于IoC容器</strong>；</li><li><code>为什么需要依赖</code>：<strong>应用程序需要IoC容器来提供对象需要的外部资源</strong>；</li><li><code>谁注入谁</code>：很明显是<strong>IoC容器注入应用程序某个对象——应用程序依赖的对象</strong>；</li><li><code>注入了什么</code>：就是<strong>注入某个对象所需要的外部资源</strong>（包括对象、资源、常量数据）。</li></ul><p><code>IoC</code>和<code>DI</code>由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物<code>Martin Fowler</code>又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。</p><p>更多关于<code>Martin Fowler</code>对于依赖注入描述的信息可阅读：《<a href="https://www.martinfowler.com/articles/injection.html">Inversion of Control Containers and the Dependency Injection pattern</a>》</p><h2 id="IoC-配置的三种方式"><a href="#IoC-配置的三种方式" class="headerlink" title="IoC 配置的三种方式"></a>IoC 配置的三种方式</h2><hr><h3 id="XML-配置方式"><a href="#XML-配置方式" class="headerlink" title="XML 配置方式"></a>XML 配置方式</h3><h3 id="Java-配置方式"><a href="#Java-配置方式" class="headerlink" title="Java 配置方式"></a>Java 配置方式</h3><h3 id="注解-配置方式"><a href="#注解-配置方式" class="headerlink" title="注解 配置方式"></a>注解 配置方式</h3><h2 id="依赖注入的三种方式"><a href="#依赖注入的三种方式" class="headerlink" title="依赖注入的三种方式"></a>依赖注入的三种方式</h2><hr><h3 id="setter-方式"><a href="#setter-方式" class="headerlink" title="setter 方式"></a>setter 方式</h3><h3 id="构造函数-方式"><a href="#构造函数-方式" class="headerlink" title="构造函数 方式"></a>构造函数 方式</h3><h3 id="注解注入-方式"><a href="#注解注入-方式" class="headerlink" title="注解注入 方式"></a>注解注入 方式</h3><p>以@Autowired（自动注入）注解注入为例，修饰符有三个属性：Constructor，byType，byName，默认按照byType注入。 </p><ul><li>constructor：通过构造方法进行自动注入，Spring会匹配与构造方法参数类型一致的bean进行注入，如果有一个多参数的构造方法，一个只有一个参数的构造方法，在容器中查找到多个匹配多参数构造方法的bean，那么spring会优先将bean注入到多参数的构造方法中。 </li><li>byName：被注入bean的id名必须与set方法后半截匹配，并且id名称的第一个单词首字母必须小写，这一点与手动set注入有点不同。 </li><li>byType：查找所有的set方法，将符合符合参数类型的bean注入。</li></ul><h2 id="IoC-与-DI-使用问题记录"><a href="#IoC-与-DI-使用问题记录" class="headerlink" title="IoC 与 DI 使用问题记录"></a>IoC 与 DI 使用问题记录</h2>]]></content>
      
      
      <categories>
          
          <category> Spring Framework </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 初识</title>
      <link href="/2022/01/14/docker/01-docker-chu-shi/"/>
      <url>/2022/01/14/docker/01-docker-chu-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker’s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production.</p></blockquote><h2 id="Docker-Overview"><a href="#Docker-Overview" class="headerlink" title="Docker Overview"></a>Docker Overview</h2><p>Docker provides the ability to package and run an application in a loosely isolated environment called a container. The isolation and security allows you to run many containers simultaneously on a given host. Containers are lightweight and contain everything needed to run the application, so you do not need to rely on what is currently installed on the host. You can easily share containers while you work, and be sure that everyone you share with gets the same container that works in the same way.</p><h2 id="Docker-Architecture"><a href="#Docker-Architecture" class="headerlink" title="Docker Architecture"></a>Docker Architecture</h2><p>Docker uses a client-server architecture. The Docker client talks to the Docker daemon, which does the heavy lifting of building, running, and distributing your Docker containers. The Docker client and daemon can run on the same system, or you can connect a Docker client to a remote Docker daemon. The Docker client and daemon communicate using a REST API, over UNIX sockets or a network interface. Another Docker client is Docker Compose, that lets you work with applications consisting of a set of containers.<br><img src="/images/docker/docker-architecture.png" alt="Docker Architecture"></p><h3 id="The-Docker-daemon"><a href="#The-Docker-daemon" class="headerlink" title="The Docker daemon"></a>The Docker daemon</h3><p>The Docker daemon () listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes. A daemon can also communicate with other daemons to manage Docker services.dockerd</p><h3 id="The-Docker-client"><a href="#The-Docker-client" class="headerlink" title="The Docker client"></a>The Docker client</h3><p>The Docker client () is the primary way that many Docker users interact with Docker. When you use commands such as , the client sends these commands to , which carries them out. The command uses the Docker API. The Docker client can communicate with more than one daemon.dockerdocker rundockerddocker</p><h3 id="Docker-Desktop"><a href="#Docker-Desktop" class="headerlink" title="Docker Desktop"></a>Docker Desktop</h3><p>Docker Desktop is an easy-to-install application for your Mac or Windows environment that enables you to build and share containerized applications and microservices. Docker Desktop includes the Docker daemon (), the Docker client (), Docker Compose, Docker Content Trust, Kubernetes, and Credential Helper. For more information, see Docker Desktop.dockerddocker</p><h3 id="Docker-registries"><a href="#Docker-registries" class="headerlink" title="Docker registries"></a>Docker registries</h3><p>A Docker registry stores Docker images. Docker Hub is a public registry that anyone can use, and Docker is configured to look for images on Docker Hub by default. You can even run your own private registry.</p><p>When you use the or commands, the required images are pulled from your configured registry. When you use the command, your image is pushed to your configured registry.docker pulldocker rundocker push</p><h3 id="Docker-objects"><a href="#Docker-objects" class="headerlink" title="Docker objects"></a>Docker objects</h3><p>When you use Docker, you are creating and using images, containers, networks, volumes, plugins, and other objects. This section is a brief overview of some of those objects.</p><h4 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h4><p>An image is a read-only template with instructions for creating a Docker container. Often, an image is based on another image, with some additional customization. For example, you may build an image which is based on the image, but installs the Apache web server and your application, as well as the configuration details needed to make your application run.ubuntu</p><p>You might create your own images or you might only use those created by others and published in a registry. To build your own image, you create a Dockerfile with a simple syntax for defining the steps needed to create the image and run it. Each instruction in a Dockerfile creates a layer in the image. When you change the Dockerfile and rebuild the image, only those layers which have changed are rebuilt. This is part of what makes images so lightweight, small, and fast, when compared to other virtualization technologies.</p><h4 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h4><p>A container is a runnable instance of an image. You can create, start, stop, move, or delete a container using the Docker API or CLI. You can connect a container to one or more networks, attach storage to it, or even create a new image based on its current state.</p><p>By default, a container is relatively well isolated from other containers and its host machine. You can control how isolated a container’s network, storage, or other underlying subsystems are from other containers or from the host machine.</p><p>A container is defined by its image as well as any configuration options you provide to it when you create or start it. When a container is removed, any changes to its state that are not stored in persistent storage disappear.</p><h2 id="The-Underlying-Technology"><a href="#The-Underlying-Technology" class="headerlink" title="The Underlying Technology"></a>The Underlying Technology</h2><p>Docker is written in the Go programming language and takes advantage of several features of the Linux kernel to deliver its functionality. Docker uses a technology called to provide the isolated workspace called the container. When you run a container, Docker creates a set of namespaces for that container.namespaces</p><p>These namespaces provide a layer of isolation. Each aspect of a container runs in a separate namespace and its access is limited to that namespace.</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构 栈和队列</title>
      <link href="/2022/01/13/data-structures-and-algorithms/02-shu-ju-jie-gou-zhi-zhan-he-dui-lie/"/>
      <url>/2022/01/13/data-structures-and-algorithms/02-shu-ju-jie-gou-zhi-zhan-he-dui-lie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>堆栈和队列是两种特殊的线性表，堆栈的主要特点是只能在栈顶操作，也就是遵循先进后出的原则，队列的主要特点是只能在一端插入，另一端删除，也就是遵循先进先出的原则。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Data Structures </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构 线性表</title>
      <link href="/2022/01/12/data-structures-and-algorithms/01-shu-ju-jie-gou-zhi-xian-xing-biao/"/>
      <url>/2022/01/12/data-structures-and-algorithms/01-shu-ju-jie-gou-zhi-xian-xing-biao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>线性表是我们日常工作中最简单也最常用的一种数据结构，它的最基本的特点就是每个数据元素最多只能有一个直接前驱和一个直接后驱，只有第一个元素没有直接前驱，而最后一个元素也没有直接后驱。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Data Structures </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 并发编程的艺术（五）（Java中的锁）</title>
      <link href="/2022/01/11/concurrency-programming/5-bing-fa-bian-cheng-de-yi-zhu-java-zhong-de-suo/"/>
      <url>/2022/01/11/concurrency-programming/5-bing-fa-bian-cheng-de-yi-zhu-java-zhong-de-suo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文为<strong>《Java 并发编程的艺术》</strong>阅读笔记五，主要内容为Java中的锁。将介绍Java并发包中与锁相关的API和组件，以及这些API和组件的使用方式和实现细节。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java Concurrency </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 并发编程的艺术（四）（Java并发编程基础）</title>
      <link href="/2022/01/10/concurrency-programming/4-bing-fa-bian-cheng-de-yi-zhu-java-bing-fa-bian-cheng-ji-chu/"/>
      <url>/2022/01/10/concurrency-programming/4-bing-fa-bian-cheng-de-yi-zhu-java-bing-fa-bian-cheng-ji-chu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文为<strong>《Java 并发编程的艺术》</strong>阅读笔记四，主要内容为Java并发编程的基础知识，包括<code>线程的启动</code>、<code>线程间的通信</code>以及简单的<code>线程池</code>示例和应用等内容。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java Concurrency </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 并发编程的艺术（三）（Java内存模型二）</title>
      <link href="/2022/01/09/concurrency-programming/3-bing-fa-bian-cheng-de-yi-zhu-java-nei-cun-mo-xing-2/"/>
      <url>/2022/01/09/concurrency-programming/3-bing-fa-bian-cheng-de-yi-zhu-java-nei-cun-mo-xing-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文为<strong>《Java 并发编程的艺术》</strong>阅读笔记三，分为上下两部分。主要内容为Java内存模型，分别从<code>volatile</code>、<code>synchronized</code>、<code>原子操作的实现原理</code>三个方面Java并发编程的底层机制。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java Concurrency </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 并发编程的艺术（三）（Java内存模型一）</title>
      <link href="/2022/01/08/concurrency-programming/3-bing-fa-bian-cheng-de-yi-zhu-java-nei-cun-mo-xing-1/"/>
      <url>/2022/01/08/concurrency-programming/3-bing-fa-bian-cheng-de-yi-zhu-java-nei-cun-mo-xing-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文为<strong>《Java 并发编程的艺术》</strong>阅读笔记三，分为上下两部分。主要内容为Java内存模型，分别从<code>volatile</code>、<code>synchronized</code>、<code>原子操作的实现原理</code>三个方面Java并发编程的底层机制。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java Concurrency </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 并发编程的艺术（二）（并发机制的底层实现）</title>
      <link href="/2022/01/07/concurrency-programming/2-bing-fa-bian-cheng-de-yi-zhu-java-bing-fa-ji-zhi-de-di-ceng-shi-xian/"/>
      <url>/2022/01/07/concurrency-programming/2-bing-fa-bian-cheng-de-yi-zhu-java-bing-fa-ji-zhi-de-di-ceng-shi-xian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文为<strong>《Java 并发编程的艺术》</strong>阅读笔记二，主要内容为Java并发编程的底层机制，分别从<code>volatile</code>、<code>synchronized</code>、<code>原子操作的实现原理</code>三个方面Java并发编程的底层机制。</p></blockquote><h2 id="volatial的应用"><a href="#volatial的应用" class="headerlink" title="volatial的应用"></a>volatial的应用</h2><h3 id="volatial的定义及实现原理"><a href="#volatial的定义及实现原理" class="headerlink" title="volatial的定义及实现原理"></a>volatial的定义及实现原理</h3><p><code>volatile</code>是Java提供的一种轻量级的同步机制。Java语言包含两种内在的同步机制：同步块（或方法）和 <code>volatile</code> 变量，相比于<code>synchronized</code>（<code>synchronized</code>通常称为重量级锁），<code>volatile</code>更轻量级，因为它不会引起线程上下文的切换和调度。但是<code>volatile</code>变量的同步性较差（有时它更简单并且开销更低），而且其使用也更容易出错。</p><p>如果一个字段被声明为<code>volatile</code>变量，Java线程内存模型确保所有线程看到这个变量的值是一致的。</p><p>若一个字段被定义为<code>volatile</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// instance 是volatile变量</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>转换成为汇编指令后：</p><pre class="language-asm" data-language="asm"><code class="language-asm">0x01a3de1d: movb $0 X 0, 0 X 1104800(%esi);0x01a3de24: lock addl $0 X 0, (%esp);</code></pre><p>有<code>volatile</code>变量修饰的共享变量在进行写操作时会多出第二行汇编代码，<code>Lock</code>前缀的指令在多核处理器下会做两件事情：</p><ul><li><strong>将当前处理器缓存行的数据写回到系统内存</strong></li><li><strong>写回内存的操作会使在其它CPU里缓存了该内存地址的数据无效</strong></li></ul><p><code>Lock</code>前缀指令实际上相当于一个内存屏障（<code>Memory Barriers</code>），确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成。</p><p>注：<code>内存屏障</code>（<code>Memory Barriers</code>）</p><h3 id="volatial变量的特性"><a href="#volatial变量的特性" class="headerlink" title="volatial变量的特性"></a>volatial变量的特性</h3><p>1、保证共享变量的可见性，但不保证原子性。<br>2、禁止指令重排序：执行到<code>volatile</code>变量时，其前面的所有语句都执行完，后面所有语句都未执行。</p><p>注：<code>指令重排序</code></p><h3 id="volatial的优化及使用场景"><a href="#volatial的优化及使用场景" class="headerlink" title="volatial的优化及使用场景"></a>volatial的优化及使用场景</h3><p>优化：使用<strong>追加字节</strong>的方式将队列的<code>头尾节点</code>追加至合适字宽的缓存行，例如<code>Core Solo</code>和<code>Pentium M</code>处理器的缓存行为<code>64字宽</code>，不支持部分填充填充缓存行。这种情况有可能导致，在队列的头节点和尾节点都不足<code>64字宽</code>的时候，处理器会将他们都读到同一个高速<code>缓存行</code>，在多处理器下每个处理器都会在自己的高速缓存中缓存同样的头节点和尾节点。当一个处理器试图修改头节点时，会将当整个缓存行锁定（<code>缓存行锁定</code>），在<code>缓存一致性</code>作用下，其它处理器也就不能访问自己缓存中的尾节点。这将严重影响队列的入队和出队效率。</p><p>注：<code>缓存行</code><br>注：<code>缓存一致性</code></p><p>使用场景：首先针对<code>复合操作</code>，<code>volatile</code>是不适用的，因为其只保证了可见性而不保证原子性。例如当对<code>volatile</code>变量进行自增这样的复合操作时，会得到想象之外的结果，如下对<code>volatile</code>变量<code>count</code>进行自增操作，正常结果应该会是<code>10000</code>，但是每次运行结果都会不一致。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        test<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">activeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果可能是<code>9939</code>，<code>9829</code>等，原因在于<code>自增操作++</code>属于<code>复合操作</code>，其分解后总共包含三个操作：</p><ul><li>读取count的值</li><li>将读取到的count进行加1操作</li><li>将加1操作后的值赋给count变量地址</li></ul><p>在该过程中，<code>volatile</code>的作用便是只保证了第一步对所有线程而言都是顺序执行，但是当其中一个线程第一步拿到最新的值进行后面两个操作时，此时其它线程写入新的<code>count</code>值，那么这个线程拿到的<code>count</code>值就不是最新的，其结果便是导致最后结果<code>count</code>变量值低于预期值。</p><h2 id="synchronized的应用"><a href="#synchronized的应用" class="headerlink" title="synchronized的应用"></a>synchronized的应用</h2><h3 id="Java对象头"><a href="#Java对象头" class="headerlink" title="Java对象头"></a>Java对象头</h3><h3 id="锁的升级和对比"><a href="#锁的升级和对比" class="headerlink" title="锁的升级和对比"></a>锁的升级和对比</h3><h2 id="原子操作的实现原理"><a href="#原子操作的实现原理" class="headerlink" title="原子操作的实现原理"></a>原子操作的实现原理</h2>]]></content>
      
      
      <categories>
          
          <category> Java Concurrency </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 并发编程的艺术（一）（并发编程的挑战）</title>
      <link href="/2022/01/06/concurrency-programming/1-bing-fa-bian-cheng-de-yi-zhu-bing-fa-bian-cheng-de-tiao-zhan/"/>
      <url>/2022/01/06/concurrency-programming/1-bing-fa-bian-cheng-de-yi-zhu-bing-fa-bian-cheng-de-tiao-zhan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文为<strong>《Java 并发编程的艺术》</strong>阅读笔记一，主要内容为并发编程的挑战，分别从<code>上下文切换</code>、<code>死锁</code>、<code>资源限制</code>三个方面说明在运用并发编程时可能遇到的一些挑战和瓶颈，并提纲一些可靠的解决方案。</p></blockquote><h2 id="并发编程的挑战"><a href="#并发编程的挑战" class="headerlink" title="并发编程的挑战"></a>并发编程的挑战</h2><h3 id="1-1-上下文切换"><a href="#1-1-上下文切换" class="headerlink" title="1.1 上下文切换"></a>1.1 上下文切换</h3><p><code>上下文切换</code>：CPU通过给每个线程分配<code>时间片</code>来实现多线程执行代码，当前线程执行一个时间片后会切换到下一个线程，切换前会保存该线程的状态信息，切换回来时会加载该线程的状态信息。任务从保存到再加载的过程就是一次<code>上下文切换</code>。</p><h4 id="1-1-1-多线程一定快吗"><a href="#1-1-1-多线程一定快吗" class="headerlink" title="1.1.1 多线程一定快吗"></a>1.1.1 多线程一定快吗</h4><p>线程存在创建和上下文切换的开销</p><h4 id="1-1-2-测试上下文切换次数和时长"><a href="#1-1-2-测试上下文切换次数和时长" class="headerlink" title="1.1.2 测试上下文切换次数和时长"></a>1.1.2 测试上下文切换次数和时长</h4><h4 id="1-1-3-如何减少切换上下文"><a href="#1-1-3-如何减少切换上下文" class="headerlink" title="1.1.3 如何减少切换上下文"></a>1.1.3 如何减少切换上下文</h4><ul><li>无锁并发编程</li><li>CAS算法</li><li>使用最少线程</li><li>使用协程</li></ul><h4 id="1-1-4-减少切换上下文切换实战"><a href="#1-1-4-减少切换上下文切换实战" class="headerlink" title="1.1.4 减少切换上下文切换实战"></a>1.1.4 减少切换上下文切换实战</h4><h3 id="1-2-死锁"><a href="#1-2-死锁" class="headerlink" title="1.2 死锁"></a>1.2 死锁</h3><p><code>死锁</code>：所谓<code>死锁</code>是指两个或两个以上的线程在执行过程中，因<code>争夺资源</code>而造成的一种<code>互相等待</code>的现象，若无外力作用，它们都将无法推进下去。</p><ul><li>避免一个线程同时获得多个锁</li><li>避免一个线程在锁内同时占用多个资源</li><li>尝试使用定时锁</li><li>对于数据库锁，加锁和解锁必须在同一个数据库里操作</li></ul><h3 id="1-3-资源限制"><a href="#1-3-资源限制" class="headerlink" title="1.3 资源限制"></a>1.3 资源限制</h3><ul><li>硬件资源</li><li>软件资源</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java Concurrency </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 并发编程的艺术（〇）（概览）</title>
      <link href="/2022/01/05/concurrency-programming/0-bing-fa-bian-cheng-de-yi-zhu-gai-lan/"/>
      <url>/2022/01/05/concurrency-programming/0-bing-fa-bian-cheng-de-yi-zhu-gai-lan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文为<strong>《Java 并发编程的艺术》</strong>阅读笔记〇，主要涉及内容为该书内容的大致概括和梳理，并为后续的阅读笔记起一个总领提纲，方便以后在本文中按照提纲进行总结。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java Concurrency </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Matery 建站</title>
      <link href="/2022/01/02/hexo-matery/"/>
      <url>/2022/01/02/hexo-matery/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要内容为<code>Hexo</code>博客主题<code>Matery</code>在本网站的一些使用情况和改动，<strong>作者</strong>将对本网站的建立过程进行记录，记录内容主要涵盖<strong>主题原作者</strong>的博客使用<code>Hexo</code>的介绍内容及基本配置，另外也会记录<strong>作者</strong>在原基础上所作的一些改动和遇到的一些问题。</p></blockquote><h2 id="Hexo-博客模板"><a href="#Hexo-博客模板" class="headerlink" title="Hexo 博客模板"></a>Hexo 博客模板</h2><p>前端开发环境搭建需要安装NodeJS环境，安装Vue脚手架，更多相关开发工具：Git、VSCode等，对于本网站的搭建同样不可缺少，本文不再对环境搭建过程赘述。</p><ul><li>1、下载hexo-cli： <code>npm install -g hexo-cli</code></li><li>2、初始化blog： <code>hexo init &lt;folder&gt;</code></li><li>3、进入blog目录： <code>cd &lt;folder&gt;</code></li><li>4、下载依赖： <code>npm install</code></li><li>5、生成静态文件并部署： <code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo s -p 8080</code></li><li>6、访问博客： <code>http://localhost:8080</code></li></ul><p><img src="/images/hexo/Hexo%E5%88%9D%E5%A7%8B%E5%8C%96.png"></p><h2 id="Hexo-目录文件"><a href="#Hexo-目录文件" class="headerlink" title="Hexo 目录文件"></a>Hexo 目录文件</h2><ul><li>1、<code>node_modules</code>：# 依赖包</li><li>2、<code>public</code>：# 存放被解析markdown、html文件</li><li>3、<code>scaffolds</code>：# 当您新建文章时，根据scaffold生成文件</li><li>4、<code>source</code>：# 资源文件夹</li><li>5、<code>source/_posts</code>：# 博客文章目录</li><li>6、<code>themes</code>：# 主题</li><li>7、<code>_config.yml</code>：# 网站的配置信息。标题、网站名称等</li><li>8、<code>db.json</code>：# source解析所得到的</li><li>9、<code>package.json</code>：# 应用程序的配置信息</li></ul><h2 id="Matery-主题模板"><a href="#Matery-主题模板" class="headerlink" title="Matery 主题模板"></a>Matery 主题模板</h2><p>两种方式获取：</p><ul><li>下载 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">Matery</a> 博客主题文件复制到博客目录theme中。</li><li>在theme下执行命令： <code>git clone https://github.com/blinkfox/hexo-theme-matery.git</code></li></ul><p>下载Matery主题文件存放在博客目录的theme文件夹中，至此，目录内将会有两个配置文件，一个是Hexo博客根目录的配置文件<code>_config.yml</code>，一个是Matery主题文件夹中的配置文件<code>_config.yml</code>，需要注意区分。</p><h3 id="Matery-主题配置"><a href="#Matery-主题配置" class="headerlink" title="Matery 主题配置"></a>Matery 主题配置</h3><p>修改Hexo根目录下的配置文件<code>_config.yml</code>，将<code>theme</code>设置为<code>hexo-theme-matery</code>。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery</code></pre><p><img src="/images/hexo/Hexo-Home.png"><br><img src="/images/hexo/Hexo-Matery.png"></p><h3 id="Matery-建议配置"><a href="#Matery-建议配置" class="headerlink" title="Matery 建议配置"></a>Matery 建议配置</h3><ul><li>修改根目录<code>_config.yml</code>文件<code>url</code>值为网站发布域名，如<code>https://xxx.gitee.io</code>。</li><li>修改根目录<code>_config.yml</code>文件<code>per_page</code>值为<code>6</code>的倍数，如<code>6</code>，<code>12</code>等。</li><li>修改根目录<code>_config.yml</code>文件<code>language</code>值为<code>zh-CN</code>。</li></ul><h3 id="Matery-插件配置"><a href="#Matery-插件配置" class="headerlink" title="Matery 插件配置"></a>Matery 插件配置</h3><h4 id="Matery-代码高亮插件"><a href="#Matery-代码高亮插件" class="headerlink" title="Matery 代码高亮插件"></a>Matery 代码高亮插件</h4><p>使用主题默认自带的代码高亮插件，在博客根目录配置文件<code>_config.yml</code>中修改配置信息：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span></code></pre><h4 id="Matery-博客内容搜索插件"><a href="#Matery-博客内容搜索插件" class="headerlink" title="Matery 博客内容搜索插件"></a>Matery 博客内容搜索插件</h4><p>使用<code>hexo-generator-search</code>插件，执行命令<code>npm install hexo-generator-search --save</code>，在博客根目录配置文件<code>_config.yml</code>中新增配置信息：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre><h4 id="Matery-中文链接转拼音插件"><a href="#Matery-中文链接转拼音插件" class="headerlink" title="Matery 中文链接转拼音插件"></a>Matery 中文链接转拼音插件</h4><p>使用<code>hexo-permalink-pinyin</code>插件，执行命令<code>npm i hexo-permalink-pinyin --save</code>，在博客根目录配置文件<code>_config.yml</code>中新增配置信息：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span></code></pre><h4 id="Matery-文章字数统计插件"><a href="#Matery-文章字数统计插件" class="headerlink" title="Matery 文章字数统计插件"></a>Matery 文章字数统计插件</h4><p>使用<code>hexo-wordcount</code>插件，执行命令<code>npm i --save hexo-wordcount</code>，在主题Matery目录下的配置文件<code>_config.yml</code>中激活配置信息：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">wordCount</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 将这个值设置为 true 即可.</span>  <span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>添加 RSS 订阅支持</p><h4 id="Matery-RSS-订阅支持插件"><a href="#Matery-RSS-订阅支持插件" class="headerlink" title="Matery RSS 订阅支持插件"></a>Matery RSS 订阅支持插件</h4><p>使用<code>hexo-generator-feed</code>插件，执行命令<code>npm install hexo-generator-feed --save</code>，在博客根目录下的配置文件<code>_config.yml</code>中新增配置信息：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date</code></pre><p>执行<code>hexo clean &amp;&amp; hexo g</code>重新生成博客文件，然后在 public 文件夹中即可看到<code>atom.xml</code>文件，说明已经安装成功了。</p><h3 id="Matery-菜单配置"><a href="#Matery-菜单配置" class="headerlink" title="Matery 菜单配置"></a>Matery 菜单配置</h3><p>Matery默认实现了很多默认菜单样式，包括<code>文章分类</code>，<code>文章标签</code>、<code>画廊相册</code>、<code>关于作者</code>、<code>音乐</code>，<code>影片</code>，<code>友情链接</code>等菜单，更多其它样式可在<code>Matery</code>主题目录的<code>layout</code>文件夹中查看。使用者可以自由拓展自己想要的菜单，也可以对这些默认菜单的样式进行调整，下面是一些默认菜单的配置。</p><p>配置菜单前请先在主题目录的配置文件<code>_config.yml</code>中添加菜单路径和图标。</p><h4 id="Matery-文章标签"><a href="#Matery-文章标签" class="headerlink" title="Matery 文章标签"></a>Matery 文章标签</h4><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>在博客根目录<code>/source/tags</code>下，<code>index.md</code>文件加上如下信息</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-01-02 00:00:00</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span></code></pre><h4 id="Matery-文章分类"><a href="#Matery-文章分类" class="headerlink" title="Matery 文章分类"></a>Matery 文章分类</h4><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>在博客根目录<code>/source/categories</code>下，<code>index.md</code>文件加上如下信息</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-01-02 00:00:00</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span></code></pre><h4 id="Matery-文章归档"><a href="#Matery-文章归档" class="headerlink" title="Matery 文章归档"></a>Matery 文章归档</h4><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"archives"</span></code></pre><p>在博客根目录<code>/source/archives</code>下，<code>index.md</code>文件加上如下信息</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> archives<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-01-02 00:00:00</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"archives"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"archives"</span><span class="token punctuation">---</span></code></pre><h4 id="Matery-关于作者"><a href="#Matery-关于作者" class="headerlink" title="Matery 关于作者"></a>Matery 关于作者</h4><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>在博客根目录<code>/source/about</code>下，<code>index.md</code>文件加上如下信息</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-01-02 00:00:00</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span></code></pre><h4 id="Matery-联系方式"><a href="#Matery-联系方式" class="headerlink" title="Matery 联系方式"></a>Matery 联系方式</h4><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"archives"</span></code></pre><p>在博客根目录<code>/source/archives</code>下，<code>index.md</code>文件加上如下信息</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> archives<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-01-02 00:00:00</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"archives"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"archives"</span><span class="token punctuation">---</span></code></pre><h4 id="Matery-友情链接"><a href="#Matery-友情链接" class="headerlink" title="Matery 友情链接"></a>Matery 友情链接</h4><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>在博客根目录<code>/source/friends</code>下，<code>index.md</code>文件加上如下信息</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-01-02 00:00:00</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><h3 id="Matery-文章配置"><a href="#Matery-文章配置" class="headerlink" title="Matery 文章配置"></a>Matery 文章配置</h3><p>Front-matter 选项中的所有内容均为非必填的。建议至少填写<code>title</code>和<code>date</code>的值。</p><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="left">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="left"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <a href="http://xxx.com/xxx.jpg">http://xxx.com/xxx.jpg</a></td></tr><tr><td align="left">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="left">cover</td><td align="left"><code>false</code></td><td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="left">无</td><td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="left">toc</td><td align="left"><code>true</code></td><td align="left">是否开启<code>TOC</code>，可以针对某篇文章单独关闭 <code>TOC</code> 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="left">mathjax</td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="left">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr></tbody></table><h4 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h4><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Hexo Matery 建站<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-01-02 00:00:00</span><span class="token punctuation">---</span></code></pre><h4 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h4><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Hexo Matery 建站<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-01-02 00:00:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 涂飞<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre><h3 id="Matery-其它配置"><a href="#Matery-其它配置" class="headerlink" title="Matery 其它配置"></a>Matery 其它配置</h3><h4 id="页脚修改"><a href="#页脚修改" class="headerlink" title="页脚修改"></a>页脚修改</h4><p>在主题文件的<code>/layout/_partial/footer.ejs</code>文件中，包括站点、使用的主题、访问量。</p><h4 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a>社交链接</h4><p>在主题配置文件中，默认支持<code>QQ</code>、<code>GitHub</code>和<code>Email</code>等的配置，可在主题文件的<code>/layout/_partial/social-link.ejs</code>文件中新增、修改社交链接地址，增加链接参考如下代码：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/blinkfox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>其中，社交图标（如：fa-github）可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。</p><h4 id="打赏二维码"><a href="#打赏二维码" class="headerlink" title="打赏二维码"></a>打赏二维码</h4><p>在主题文件的<code>source/medias/reward</code>文件中。</p><h4 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h4><p>在<code>Matery</code>主题配置文件<code>_config.yml</code>中：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否在首页显示音乐.</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token comment">#非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">autoHide</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># hide automaticaly</span>  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment">#requiremusic platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment">#require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841</span>     <span class="token comment">#requiresong id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>       <span class="token comment"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#white'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span>       <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 列表默认折叠</span>  <span class="token key atrule">hideLrc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>     <span class="token comment"># 隐藏歌词</span><span class="token comment"># Whether to display the musics.</span><span class="token comment"># 单独的音乐页面.</span><span class="token key atrule">musics</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span>          <span class="token comment">#非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 音乐  <span class="token key atrule">server</span><span class="token punctuation">:</span> tencent   <span class="token comment">#require music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment">#require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">1776127550</span>     <span class="token comment">#require song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span>       <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 列表默认折叠</span>  <span class="token key atrule">listMaxHeight</span><span class="token punctuation">:</span> <span class="token string">"525px"</span> <span class="token comment">#列表最大高度</span></code></pre><h4 id="视频播放器"><a href="#视频播放器" class="headerlink" title="视频播放器"></a>视频播放器</h4><p>在<code>Matery</code>主题配置文件<code>_config.yml</code>中：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Whether to display the videos.</span><span class="token comment"># 是否在首页显示视频.</span><span class="token key atrule">video</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">showTitle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> 精彩视频  <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token comment"># url和iframeUrl其中一个必填</span>  <span class="token key atrule">iframeUrl</span><span class="token punctuation">:</span> //player.bilibili.com/player.html<span class="token punctuation">?</span>aid=669520137<span class="token important">&amp;bvid=BV1oa4y1L7mw&amp;cid=234543483&amp;page=1</span>  <span class="token key atrule">pic</span><span class="token punctuation">:</span>  <span class="token key atrule">thumbnails</span><span class="token punctuation">:</span>  <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">850</span> <span class="token comment"># 如：400</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 是否循环播放</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span> <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span></code></pre><h4 id="更多其它配置"><a href="#更多其它配置" class="headerlink" title="更多其它配置"></a>更多其它配置</h4><ul><li>1、可在<code>Matery</code>主题配置文件<code>_config.yml</code>中探索</li><li>2、主题作者对<code>Matery</code>主题的介绍：<a href="http://blinkfox.com/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">闪烁之狐</a></li></ul><h3 id="Matery-效果截图"><a href="#Matery-效果截图" class="headerlink" title="Matery 效果截图"></a>Matery 效果截图</h3><p>在博客根目录<code>/source/_post</code>下<code>hello-world.md</code>中添加</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">categories</span><span class="token punctuation">:</span> <span class="token string">"Hexo"</span><span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token string">"Hexo"</span></code></pre><p>在博客根目录下添加文件<code>/source/_data/friends.json</code>，写上如下内容</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre><p><img src="/images/hexo/Hexo-Tips.png" alt="标签"><br><img src="/images/hexo/Hexo-Categories.png" alt="分类"><br><img src="/images/hexo/Hexo-About.png" alt="关于"><br><img src="/images/hexo/Hexo-Post.png" alt="归档"><br><img src="/images/hexo/Hexo-Friends.png" alt="友链"></p><h2 id="Matery-个性化配置"><a href="#Matery-个性化配置" class="headerlink" title="Matery 个性化配置"></a>Matery 个性化配置</h2><h3 id="Matery-画廊相册改造"><a href="#Matery-画廊相册改造" class="headerlink" title="Matery 画廊相册改造"></a>Matery 画廊相册改造</h3><p>由于原主题的画廊相册的样式我并不是很喜欢，但是在原主题的关于页面下方有一个相册的样式我比较喜欢<br><img src="/images/hexo/Hexo-Gallery.png" alt="Matery my-gallery 样式"><br>不知道为什么作者并没有统一起来。鉴于此，才有我基于<code>my-gallery</code>样式进行魔改的画廊相册页面<br><img src="/images/hexo/TF-Gallery.png" alt="画廊（相册封面）"><br><img src="/images/hexo/TF-Galleries.png" alt="画廊（相册图片）"></p><h4 id="新建画廊相册二级菜单"><a href="#新建画廊相册二级菜单" class="headerlink" title="新建画廊相册二级菜单"></a>新建画廊相册二级菜单</h4><h4 id="画廊（相册封面）页面改造"><a href="#画廊（相册封面）页面改造" class="headerlink" title="画廊（相册封面）页面改造"></a>画廊（相册封面）页面改造</h4><h4 id="画廊（相册图片）页面改造"><a href="#画廊（相册图片）页面改造" class="headerlink" title="画廊（相册图片）页面改造"></a>画廊（相册图片）页面改造</h4><h3 id="Matery-图书阅读笔记"><a href="#Matery-图书阅读笔记" class="headerlink" title="Matery 图书阅读笔记"></a>Matery 图书阅读笔记</h3><p>由于自己想做一个单独的图书阅读记录，类似于相册分为两个页面，首先是自己阅读过的图书的封面列表展示和关于图书的简单介绍页面，然后点击封面可以进入图书阅读笔记页面，该页面的样式可与博客文章页面相似，该想法目前尚未落地实施。</p><h4 id="图书笔记列表封面样式"><a href="#图书笔记列表封面样式" class="headerlink" title="图书笔记列表封面样式"></a>图书笔记列表封面样式</h4><h4 id="图书笔记列表展示样式"><a href="#图书笔记列表展示样式" class="headerlink" title="图书笔记列表展示样式"></a>图书笔记列表展示样式</h4><h4 id="图书笔记内容样式"><a href="#图书笔记内容样式" class="headerlink" title="图书笔记内容样式"></a>图书笔记内容样式</h4><h2 id="Matery-问题记录"><a href="#Matery-问题记录" class="headerlink" title="Matery 问题记录"></a>Matery 问题记录</h2><h3 id="代码块特殊字符乱码问题"><a href="#代码块特殊字符乱码问题" class="headerlink" title="代码块特殊字符乱码问题"></a>代码块特殊字符乱码问题</h3><h3 id="404页面显示问题"><a href="#404页面显示问题" class="headerlink" title="404页面显示问题"></a>404页面显示问题</h3>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/01/hello-world/"/>
      <url>/2022/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><h3 id="Congratulations-calss-of-2017"><a href="#Congratulations-calss-of-2017" class="headerlink" title="Congratulations, calss of 2017."></a>Congratulations, calss of 2017.</h3><blockquote><p>You’ve reached an important milestones. From time to time in the years to come, I hope you will be treated unfairly so that you will come to know the values of justice, I hope that you will suffer betrayal because that will teach you the importance of loyalty. Sorry to say, but I hope you will be lonely from time to time so that you don’t take friends for granted, I wish you bad luck again from time to time so that you you will be conscious of the role of chance in life and understand that your success is not completely deserved and that the failure of others is not completely deserved either, and when you lose as you will from time to time, I hope every now and then  your opponent will bloat over your time, it is a way for you to understand the importance of sportsmanship. I hope you’ll be ignored so you know the importance of listening to others, and I hope you will have just enough pain to learn compassion. Whether I wish these things or not, they’re going to happen, and whether you benefit from them or not will depend upon your ability to see the message in your misfortunes. </p></blockquote><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
